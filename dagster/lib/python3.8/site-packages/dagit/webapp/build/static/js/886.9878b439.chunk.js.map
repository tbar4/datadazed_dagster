{"version":3,"file":"static/js/886.9878b439.chunk.js","mappings":"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","sources":["../../core/src/workspace/RepositoryRemoteLocationLink.tsx","../../core/src/workspace/RepositoryLocationsList.tsx","../../core/src/assets/AssetGroupRoot.tsx","../../core/src/launchpad/LaunchpadSetupFromRunRoot.tsx","../../core/src/launchpad/LaunchpadSetupRoot.tsx","../../core/src/nav/LatestRunTag.tsx","../../core/src/nav/JobMetadata.tsx","../../core/src/nav/PipelineNav.tsx","../../core/src/partitions/BackfillSelector.tsx","../../core/src/partitions/PartitionGraph.tsx","../../core/src/partitions/PartitionView.tsx","../../core/src/partitions/PipelinePartitionsRoot.tsx","../../core/src/pipelines/PipelineOrJobDisambiguationRoot.tsx","../../core/src/pipelines/PipelineOverviewRoot.tsx","../../core/src/pipelines/PipelineRoot.tsx","../../core/src/instigation/LiveTickTimeline.tsx","../../core/src/instigation/TickDetailsDialog.tsx","../../core/src/instigation/TickHistory.tsx","../../core/src/schedules/ScheduleDetails.tsx","../../core/src/schedules/ScheduleRoot.tsx","../../core/src/sensors/SensorPreviousRuns.tsx","../../core/src/sensors/SensorRoot.tsx","../../core/src/workspace/GraphRoot.tsx","../../core/src/workspace/WorkspaceTabs.tsx","../../core/src/workspace/WorkspaceJobsRoot.tsx","../../core/src/workspace/WorkspaceOverviewRoot.tsx","../../core/src/workspace/WorkspacePipelineRoot.tsx","../../core/src/ops/OpCard.tsx","../../core/src/ops/OpDetailsRoot.tsx","../../core/src/ops/OpsRoot.tsx","../../core/src/schedules/SchedulesRoot.tsx","../../core/src/sensors/SensorsRoot.tsx","../../core/src/workspace/RepositoryAssetsList.tsx","../../core/src/workspace/RepositoryGraphsList.tsx","../../core/src/pipelines/PipelineTable.tsx","../../core/src/workspace/RepositoryPipelinesList.tsx","../../core/src/workspace/WorkspaceRepoRoot.tsx","../../core/src/workspace/WorkspaceRoot.tsx"],"sourcesContent":["import {Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nexport const formatRepositoryUrl = (url: string): string => {\n  try {\n    const urlObj = new URL(url);\n    let org, repo, tag;\n    if (urlObj.host === 'github.com') {\n      [, org, repo, , tag] = urlObj.pathname.split('/', 7);\n    } else if (urlObj.host === 'gitlab.com') {\n      [, org, repo, , , tag] = urlObj.pathname.split('/', 8);\n    }\n    if (org && repo && tag) {\n      return `${org}/${repo}@${tag}`;\n    }\n  } catch (error) {\n    return url;\n  }\n  return url;\n};\n\nexport const RepositoryRemoteLocationLink: React.FC<{repositoryUrl: string}> = ({\n  repositoryUrl,\n}) => {\n  const formattedUrl = formatRepositoryUrl(repositoryUrl);\n\n  return (\n    <a href={repositoryUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n      <Icon\n        color={Colors.Link}\n        name=\"link\"\n        style={{display: 'inline-block', verticalAlign: 'middle'}}\n      />{' '}\n      {formattedUrl}\n    </a>\n  );\n};\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  NonIdealState,\n  Spinner,\n  Table,\n  Tag,\n  Caption,\n  Tooltip,\n} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {usePermissions} from '../app/Permissions';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {ReloadRepositoryLocationButton} from '../nav/ReloadRepositoryLocationButton';\nimport {\n  buildReloadFnForLocation,\n  useRepositoryLocationReload,\n} from '../nav/useRepositoryLocationReload';\n\nimport {RepositoryLocationNonBlockingErrorDialog} from './RepositoryLocationErrorDialog';\nimport {RepositoryRemoteLocationLink} from './RepositoryRemoteLocationLink';\nimport {WorkspaceContext, WorkspaceRepositoryLocationNode} from './WorkspaceContext';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: true};\n\nconst LocationStatus: React.FC<{\n  location: string;\n  locationOrError: WorkspaceRepositoryLocationNode;\n}> = (props) => {\n  const {location, locationOrError} = props;\n  const [showDialog, setShowDialog] = React.useState(false);\n\n  const reloadFn = React.useMemo(() => buildReloadFnForLocation(location), [location]);\n  const {reloading, tryReload} = useRepositoryLocationReload({\n    scope: 'location',\n    reloadFn,\n  });\n\n  if (locationOrError.loadStatus === 'LOADING') {\n    if (locationOrError.locationOrLoadError) {\n      return (\n        <Tag minimal intent=\"primary\">\n          Updating...\n        </Tag>\n      );\n    } else {\n      return (\n        <Tag minimal intent=\"primary\">\n          Loading...\n        </Tag>\n      );\n    }\n  }\n\n  if (locationOrError.locationOrLoadError?.__typename === 'PythonError') {\n    return (\n      <>\n        <Box flex={{alignItems: 'center', gap: 12}}>\n          <Tag minimal intent=\"danger\">\n            Failed\n          </Tag>\n          <ButtonLink onClick={() => setShowDialog(true)}>\n            <span style={{fontSize: '14px'}}>View error</span>\n          </ButtonLink>\n        </Box>\n        <RepositoryLocationNonBlockingErrorDialog\n          location={location}\n          isOpen={showDialog}\n          error={locationOrError.locationOrLoadError}\n          reloading={reloading}\n          onDismiss={() => setShowDialog(false)}\n          onTryReload={() => tryReload()}\n        />\n      </>\n    );\n  }\n\n  return (\n    <Tag minimal intent=\"success\">\n      Loaded\n    </Tag>\n  );\n};\n\nconst ReloadButton: React.FC<{\n  location: string;\n}> = (props) => {\n  const {location} = props;\n  const {canReloadRepositoryLocation} = usePermissions();\n\n  if (!canReloadRepositoryLocation.enabled) {\n    return (\n      <Tooltip content={canReloadRepositoryLocation.disabledReason}>\n        <ButtonLink color={Colors.Gray400}>Reload</ButtonLink>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <ReloadRepositoryLocationButton location={location}>\n      {({reloading, tryReload}) => (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n          <ButtonLink onClick={() => tryReload()}>Reload</ButtonLink>\n          {reloading ? <Spinner purpose=\"body-text\" /> : null}\n        </Box>\n      )}\n    </ReloadRepositoryLocationButton>\n  );\n};\n\nexport const RepositoryLocationsList = () => {\n  const {locationEntries, loading} = React.useContext(WorkspaceContext);\n\n  if (loading && !locationEntries.length) {\n    return (\n      <Box flex={{gap: 8, alignItems: 'center'}} padding={{horizontal: 24}}>\n        <Spinner purpose=\"body-text\" />\n        <div>Loading...</div>\n      </Box>\n    );\n  }\n\n  if (!locationEntries.length) {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"folder\"\n          title=\"No repository locations\"\n          description=\"When you add a repository location to this workspace, it will appear here.\"\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Repository location</th>\n          <th>Status</th>\n          <th colSpan={2}>Updated</th>\n        </tr>\n      </thead>\n      <tbody>\n        {locationEntries.map((location) => (\n          <tr key={location.name}>\n            <td style={{maxWidth: '50%'}}>\n              <Group direction=\"column\" spacing={4}>\n                <strong>{location.name}</strong>\n                <div>\n                  {location.displayMetadata.map((metadata, idx) => {\n                    const name = metadata.key === 'url' ? 'source' : metadata.key;\n                    const display =\n                      metadata.key === 'url' ? (\n                        <RepositoryRemoteLocationLink repositoryUrl={metadata.value} />\n                      ) : (\n                        metadata.value\n                      );\n\n                    return (\n                      <div key={idx}>\n                        <Caption style={{wordBreak: 'break-word'}}>\n                          {`${name}: `}\n                          <span style={{color: Colors.Gray400}}>{display}</span>\n                        </Caption>\n                      </div>\n                    );\n                  })}\n                </div>\n              </Group>\n            </td>\n            <td>\n              <LocationStatus location={location.name} locationOrError={location} />\n            </td>\n            <td style={{whiteSpace: 'nowrap'}}>\n              <Timestamp timestamp={{unix: location.updatedTimestamp}} timeFormat={TIME_FORMAT} />\n            </td>\n            <td style={{width: '180px'}}>\n              <ReloadButton location={location.name} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n","import {Page, PageHeader, Heading, Box, Tag, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {\n  ExplorerPath,\n  explorerPathFromString,\n  explorerPathToString,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {AssetGlobalLineageLink} from './AssetPageHeader';\nimport {AssetsCatalogTable} from './AssetsCatalogTable';\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\n\ninterface AssetGroupRootParams {\n  groupName: string;\n  prefixPath: string;\n  0: string;\n}\n\nexport const AssetGroupRoot: React.FC<{repoAddress: RepoAddress; tab: 'lineage' | 'list'}> = ({\n  repoAddress,\n  tab,\n}) => {\n  useTrackPageView();\n\n  const {groupName, 0: path} = useParams<AssetGroupRootParams>();\n  const history = useHistory();\n\n  useDocumentTitle(`Asset Group: ${groupName}`);\n\n  const groupPath = workspacePathFromAddress(repoAddress, `/asset-groups/${groupName}`);\n  const groupSelector = React.useMemo(\n    () => ({\n      groupName,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [groupName, repoAddress],\n  );\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, mode: 'push' | 'replace') => {\n      history[mode](`${groupPath}/${explorerPathToString(path)}`);\n    },\n    [groupPath, history],\n  );\n\n  const onNavigateToForeignNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (node.groupName && node.repoAddress) {\n        history.replace(\n          workspacePathFromAddress(\n            node.repoAddress,\n            `/asset-groups/${node.groupName}/lineage/${node.assetKey.path\n              .map(encodeURIComponent)\n              .join('/')}`,\n          ),\n        );\n      } else {\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n      }\n    },\n    [history],\n  );\n\n  return (\n    <Page style={{display: 'flex', flexDirection: 'column', paddingBottom: 0}}>\n      <PageHeader\n        title={<Heading>{groupName}</Heading>}\n        right={\n          <div style={{marginBottom: -8}}>\n            <ReloadAllButton label=\"Reload definitions\" />\n          </div>\n        }\n        tags={\n          <Tag icon=\"asset_group\">\n            Asset Group in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        tabs={\n          <Box\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            margin={{right: 4}}\n          >\n            <Tabs selectedTabId={tab}>\n              <TabLink id=\"lineage\" title=\"Lineage\" to={`${groupPath}/lineage`} />\n              <TabLink id=\"list\" title=\"List\" to={`${groupPath}/list`} />\n            </Tabs>\n            <AssetGlobalLineageLink />\n          </Box>\n        }\n      />\n      {tab === 'lineage' ? (\n        <AssetGraphExplorer\n          fetchOptions={{groupSelector}}\n          options={{preferAssetRendering: true, explodeComposites: true}}\n          explorerPath={explorerPathFromString(path || 'lineage/')}\n          onChangeExplorerPath={onChangeExplorerPath}\n          onNavigateToForeignNode={onNavigateToForeignNode}\n        />\n      ) : (\n        <AssetsCatalogTable\n          groupSelector={groupSelector}\n          prefixPath={path.split('/').map(decodeURIComponent).filter(Boolean)}\n          setPrefixPath={(prefixPath) =>\n            history.push(`${groupPath}/list/${prefixPath.map(encodeURIComponent).join('/')}`)\n          }\n        />\n      )}\n    </Page>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissions} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {LaunchpadSessionError} from './LaunchpadSessionError';\nimport {LaunchpadSessionLoading} from './LaunchpadSessionLoading';\nimport {ConfigForRunQuery, ConfigForRunQueryVariables} from './types/ConfigForRunQuery';\n\nexport const LaunchpadSetupFromRunRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissions();\n  const {repoPath, pipelinePath, runId} = useParams<{\n    repoPath: string;\n    pipelinePath: string;\n    runId: string;\n  }>();\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return <Redirect to={`/workspace/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return (\n    <LaunchpadSetupFromRunAllowedRoot\n      pipelinePath={pipelinePath}\n      repoAddress={repoAddress}\n      runId={runId}\n    />\n  );\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n  runId: string;\n}\n\n/**\n * For a given run ID, retrieve the run config and populate a new Launchpad session with its\n * values, then redirect to the launchpad. The newly created session will be the open launchpad\n * config tab.\n */\nconst LaunchpadSetupFromRunAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress, runId} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [storageData, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n\n  const {data, loading} = useQuery<ConfigForRunQuery, ConfigForRunQueryVariables>(\n    CONFIG_FOR_RUN_QUERY,\n    {variables: {runId}},\n  );\n  const runOrError = data?.runOrError;\n  const run = runOrError?.__typename === 'Run' ? runOrError : null;\n\n  React.useEffect(() => {\n    // Wait until we have a run, then create the session.\n    if (!run) {\n      return;\n    }\n\n    const {runConfigYaml, mode, solidSelection} = run;\n    if (runConfigYaml || mode || solidSelection) {\n      // Name the session after this run ID.\n      const newSession: Partial<IExecutionSession> = {name: `From run ${run.id.slice(0, 8)}`};\n\n      if (typeof runConfigYaml === 'string') {\n        newSession.runConfigYaml = runConfigYaml;\n      }\n      if (typeof mode === 'string') {\n        newSession.mode = mode;\n      }\n      if (solidSelection instanceof Array && solidSelection.length > 0) {\n        newSession.solidSelection = solidSelection as string[];\n      } else if (typeof solidSelection === 'string' && solidSelection) {\n        newSession.solidSelection = [solidSelection];\n      }\n\n      onSave(applyCreateSession(storageData, newSession));\n    }\n  }, [run, storageData, onSave]);\n\n  if (loading) {\n    return <LaunchpadSessionLoading />;\n  }\n\n  if (!runOrError || runOrError.__typename === 'RunNotFoundError') {\n    return (\n      <LaunchpadSessionError\n        icon=\"error\"\n        title=\"No run found\"\n        description=\"The run with this ID does not exist or has been cleaned up.\"\n      />\n    );\n  }\n\n  if (runOrError.__typename === 'PythonError') {\n    return (\n      <LaunchpadSessionError icon=\"error\" title=\"Python error\" description={runOrError.message} />\n    );\n  }\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n\nconst CONFIG_FOR_RUN_QUERY = gql`\n  query ConfigForRunQuery($runId: ID!) {\n    runOrError(runId: $runId) {\n      ... on Run {\n        id\n        mode\n        runConfigYaml\n        solidSelection\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import qs from 'qs';\nimport * as React from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {\n  IExecutionSession,\n  applyCreateSession,\n  useExecutionSessionStorage,\n} from '../app/ExecutionSessionStorage';\nimport {usePermissions} from '../app/Permissions';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nexport const LaunchpadSetupRoot: React.FC<{repoAddress: RepoAddress}> = (props) => {\n  const {repoAddress} = props;\n  const {canLaunchPipelineExecution} = usePermissions();\n  const {repoPath, pipelinePath} = useParams<{repoPath: string; pipelinePath: string}>();\n\n  if (!canLaunchPipelineExecution.enabled) {\n    return <Redirect to={`/workspace/${repoPath}/pipeline_or_job/${pipelinePath}`} />;\n  }\n  return <LaunchpadSetupAllowedRoot pipelinePath={pipelinePath} repoAddress={repoAddress} />;\n};\n\ninterface Props {\n  pipelinePath: string;\n  repoAddress: RepoAddress;\n}\n\nconst LaunchpadSetupAllowedRoot: React.FC<Props> = (props) => {\n  const {pipelinePath, repoAddress} = props;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n\n  const [data, onSave] = useExecutionSessionStorage(repoAddress, pipelineName);\n  const queryString = qs.parse(window.location.search, {ignoreQueryPrefix: true});\n\n  React.useEffect(() => {\n    if (queryString.config || queryString.mode || queryString.solidSelection) {\n      const newSession: Partial<IExecutionSession> = {};\n      if (typeof queryString.config === 'string') {\n        newSession.runConfigYaml = queryString.config;\n      }\n      if (typeof queryString.mode === 'string') {\n        newSession.mode = queryString.mode;\n      }\n      if (queryString.solidSelection instanceof Array && queryString.solidSelection.length > 0) {\n        newSession.solidSelection = queryString.solidSelection as string[];\n      } else if (typeof queryString.solidSelection === 'string' && queryString.solidSelection) {\n        newSession.solidSelection = [queryString.solidSelection];\n      }\n      if (typeof queryString.solidSelectionQuery === 'string') {\n        newSession.solidSelectionQuery = queryString.solidSelectionQuery;\n      }\n\n      onSave(applyCreateSession(data, newSession));\n    }\n  });\n\n  return (\n    <Redirect\n      to={{\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${pipelineName}/playground`,\n        ),\n      }}\n    />\n  );\n};\n","import {useQuery, gql} from '@apollo/client';\nimport {Box, Colors, StyledTable, Tag, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {timingStringForStatus} from '../runs/RunDetails';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunTime, RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {RunStatus} from '../types/globalTypes';\nimport {repoAddressAsString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTagQuery, LatestRunTagQueryVariables} from './types/LatestRunTagQuery';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\nexport const LatestRunTag: React.FC<{pipelineName: string; repoAddress: RepoAddress}> = ({\n  pipelineName,\n  repoAddress,\n}) => {\n  const lastRunQuery = useQuery<LatestRunTagQuery, LatestRunTagQueryVariables>(\n    LATEST_RUN_TAG_QUERY,\n    {\n      variables: {\n        runsFilter: {\n          pipelineName,\n          tags: [\n            {\n              key: DagsterTag.RepositoryLabelTag,\n              value: repoAddressAsString(repoAddress),\n            },\n          ],\n        },\n      },\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(lastRunQuery, FIFTEEN_SECONDS);\n\n  const run = React.useMemo(() => {\n    const runsOrError = lastRunQuery.data?.pipelineRunsOrError;\n    if (runsOrError && runsOrError.__typename === 'Runs') {\n      return runsOrError.results[0] || null;\n    }\n    return null;\n  }, [lastRunQuery]);\n\n  if (!run) {\n    return null;\n  }\n\n  const stats = {start: run.startTime, end: run.endTime, status: run.status};\n  const intent = () => {\n    switch (run.status) {\n      case RunStatus.SUCCESS:\n        return 'success';\n      case RunStatus.CANCELED:\n      case RunStatus.CANCELING:\n      case RunStatus.FAILURE:\n        return 'danger';\n      default:\n        return 'none';\n    }\n  };\n\n  return (\n    <Tag intent={intent()}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <RunStatusIndicator status={run.status} size={10} />\n        Latest run:\n        {stats ? (\n          <Tooltip\n            placement=\"bottom\"\n            content={\n              <StyledTable>\n                <tbody>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>\n                      <Box padding={{right: 16}}>Started</Box>\n                    </td>\n                    <td>\n                      {stats.start ? (\n                        <TimestampDisplay timestamp={stats.start} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td style={{color: Colors.Gray300}}>Ended</td>\n                    <td>\n                      {stats.end ? (\n                        <TimestampDisplay timestamp={stats.end} timeFormat={TIME_FORMAT} />\n                      ) : (\n                        timingStringForStatus(stats.status)\n                      )}\n                    </td>\n                  </tr>\n                </tbody>\n              </StyledTable>\n            }\n          >\n            <Link to={`/instance/runs/${run.id}`}>\n              <RunTime run={run} />\n            </Link>\n          </Tooltip>\n        ) : null}\n      </Box>\n    </Tag>\n  );\n};\n\nconst LATEST_RUN_TAG_QUERY = gql`\n  query LatestRunTagQuery($runsFilter: RunsFilter) {\n    pipelineRunsOrError(filter: $runsFilter, limit: 1) {\n      ... on PipelineRuns {\n        results {\n          id\n          status\n          ...RunTimeFragment\n        }\n      }\n    }\n  }\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Button, ButtonLink, Colors, DialogFooter, Dialog, Table, Tag} from '@dagster-io/ui';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {repoAddressAsString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {LatestRunTag} from './LatestRunTag';\nimport {ScheduleOrSensorTag} from './ScheduleOrSensorTag';\nimport {JobMetadataFragment as Job} from './types/JobMetadataFragment';\nimport {\n  JobMetadataQuery,\n  JobMetadataQueryVariables,\n  JobMetadataQuery_assetNodes,\n  JobMetadataQuery_pipelineOrError_Pipeline,\n  JobMetadataQuery_pipelineRunsOrError_Runs_results,\n} from './types/JobMetadataQuery';\n\ntype JobMetadata = {\n  assetNodes: JobMetadataQuery_assetNodes[] | null;\n  job: JobMetadataQuery_pipelineOrError_Pipeline | null;\n  runsForAssetScan: JobMetadataQuery_pipelineRunsOrError_Runs_results[];\n};\n\nexport function useJobNavMetadata(repoAddress: RepoAddress, pipelineName: string) {\n  const {data} = useQuery<JobMetadataQuery, JobMetadataQueryVariables>(JOB_METADATA_QUERY, {\n    variables: {\n      runsFilter: {\n        pipelineName,\n        tags: [\n          {\n            key: DagsterTag.RepositoryLabelTag,\n            value: repoAddressAsString(repoAddress),\n          },\n        ],\n      },\n      params: {\n        pipelineName,\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n      },\n    },\n  });\n\n  return React.useMemo<JobMetadata>(() => {\n    return {\n      assetNodes: data?.assetNodes || null,\n      job:\n        data?.pipelineOrError && data.pipelineOrError.__typename === 'Pipeline'\n          ? data.pipelineOrError\n          : null,\n      runsForAssetScan:\n        data?.pipelineRunsOrError && data.pipelineRunsOrError.__typename === 'Runs'\n          ? data.pipelineRunsOrError.results\n          : [],\n    };\n  }, [data]);\n}\n\ninterface Props {\n  pipelineName: string;\n  repoAddress: RepoAddress;\n  metadata: JobMetadata;\n}\n\nexport const JobMetadata: React.FC<Props> = (props) => {\n  const {metadata, pipelineName, repoAddress} = props;\n\n  return (\n    <>\n      {metadata.job ? (\n        <JobScheduleOrSensorTag job={metadata.job} repoAddress={repoAddress} />\n      ) : null}\n      <LatestRunTag pipelineName={pipelineName} repoAddress={repoAddress} />\n      {metadata.runsForAssetScan ? (\n        <RelatedAssetsTag relatedAssets={getRelatedAssets(metadata)} />\n      ) : null}\n    </>\n  );\n};\n\nconst JobScheduleOrSensorTag: React.FC<{\n  job: Job;\n  repoAddress: RepoAddress;\n}> = ({job, repoAddress}) => {\n  const matchingSchedules = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.schedules.length) {\n      return job.schedules;\n    }\n    return [];\n  }, [job]);\n\n  const matchingSensors = React.useMemo(() => {\n    if (job?.__typename === 'Pipeline' && job.sensors.length) {\n      return job.sensors;\n    }\n    return [];\n  }, [job]);\n\n  return (\n    <ScheduleOrSensorTag\n      schedules={matchingSchedules}\n      sensors={matchingSensors}\n      repoAddress={repoAddress}\n    />\n  );\n};\n\nfunction getRelatedAssets(metadata: JobMetadata) {\n  if (metadata.assetNodes) {\n    return metadata.assetNodes.map((node) => tokenForAssetKey(node.assetKey));\n  }\n\n  return uniq(\n    metadata.runsForAssetScan.flatMap((r) => r.assets.map((a) => tokenForAssetKey(a.key))),\n  );\n}\n\nconst RelatedAssetsTag: React.FC<{relatedAssets: string[]}> = ({relatedAssets}) => {\n  const [open, setOpen] = React.useState(false);\n\n  if (relatedAssets.length === 0) {\n    return null;\n  }\n\n  if (relatedAssets.length === 1) {\n    const key = relatedAssets[0];\n    return (\n      <Tag icon=\"asset\">\n        Asset: <Link to={`/instance/assets/${key}`}>{key}</Link>\n      </Tag>\n    );\n  }\n\n  return (\n    <>\n      <Tag icon=\"asset\">\n        <ButtonLink\n          color={Colors.Link}\n          onClick={() => setOpen(true)}\n        >{`View ${relatedAssets.length} assets`}</ButtonLink>\n      </Tag>\n      <Dialog\n        title=\"Related assets\"\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        style={{maxWidth: '80%', minWidth: '500px', width: 'auto'}}\n      >\n        <Box padding={{bottom: 12}}>\n          <Table>\n            <tbody>\n              {relatedAssets.map((key) => (\n                <tr key={key}>\n                  <td>\n                    <Link\n                      key={key}\n                      to={`/instance/assets/${key}`}\n                      style={{wordBreak: 'break-word'}}\n                    >\n                      {key}\n                    </Link>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setOpen(false)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst RUN_METADATA_FRAGMENT = gql`\n  fragment RunMetadataFragment on PipelineRun {\n    id\n    status\n    assets {\n      id\n      key {\n        path\n      }\n    }\n    ...RunTimeFragment\n  }\n  ${RUN_TIME_FRAGMENT}\n`;\n\nconst JOB_METADATA_FRAGMENT = gql`\n  fragment JobMetadataFragment on Pipeline {\n    id\n    isJob\n    name\n    schedules {\n      id\n      mode\n      ...ScheduleSwitchFragment\n    }\n    sensors {\n      id\n      targets {\n        pipelineName\n        mode\n      }\n      ...SensorSwitchFragment\n    }\n  }\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n\nconst JOB_METADATA_QUERY = gql`\n  query JobMetadataQuery($params: PipelineSelector!, $runsFilter: RunsFilter!) {\n    pipelineOrError(params: $params) {\n      ... on Pipeline {\n        id\n        ...JobMetadataFragment\n      }\n    }\n    assetNodes(pipeline: $params) {\n      id\n      assetKey {\n        path\n      }\n    }\n    pipelineRunsOrError(filter: $runsFilter, limit: 5) {\n      ... on PipelineRuns {\n        results {\n          id\n          ...RunMetadataFragment\n        }\n      }\n    }\n  }\n  ${JOB_METADATA_FRAGMENT}\n  ${RUN_METADATA_FRAGMENT}\n`;\n","import {Box, PageHeader, Tabs, Tag, Heading, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {useRouteMatch} from 'react-router-dom';\n\nimport {PermissionsMap, PermissionResult, usePermissions} from '../app/Permissions';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n} from '../pipelines/PipelinePathUtils';\nimport {TabLink} from '../ui/TabLink';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {JobMetadata, useJobNavMetadata} from './JobMetadata';\nimport {RepositoryLink} from './RepositoryLink';\n\ninterface TabConfig {\n  title: string;\n  pathComponent: string;\n  getPermissionsResult?: (permissions: PermissionsMap) => PermissionResult;\n}\n\nconst pipelineTabs: {[key: string]: TabConfig} = {\n  overview: {title: 'Overview', pathComponent: ''},\n  playground: {\n    title: 'Launchpad',\n    pathComponent: 'playground',\n    getPermissionsResult: (permissions: PermissionsMap) => permissions.canLaunchPipelineExecution,\n  },\n  runs: {\n    title: 'Runs',\n    pathComponent: 'runs',\n  },\n  partitions: {\n    title: 'Partitions',\n    pathComponent: 'partitions',\n  },\n};\n\nconst currentOrder = ['overview', 'playground', 'runs', 'partitions'];\n\nfunction tabForPipelinePathComponent(component?: string): TabConfig {\n  const tabList = Object.keys(pipelineTabs);\n  const match =\n    tabList.find((t) => pipelineTabs[t].pathComponent === component) ||\n    tabList.find((t) => pipelineTabs[t].pathComponent === '')!;\n  return pipelineTabs[match];\n}\n\nconst tabForKey = (repoAddress: RepoAddress, isJob: boolean, explorerPath: ExplorerPath) => {\n  const explorerPathForTab = explorerPathToString({\n    ...explorerPath,\n    opNames: [],\n  });\n\n  // When you click one of the top tabs, it resets the snapshot you may be looking at\n  // in the Definition tab and also clears solids from the path\n  return (key: string) => {\n    const tab = pipelineTabs[key];\n    return {\n      text: tab.title,\n      href: workspacePathFromAddress(\n        repoAddress,\n        `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathForTab}${tab.pathComponent}`,\n      ),\n      getPermissionsResult: tab.getPermissionsResult,\n    };\n  };\n};\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineNav: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const permissions = usePermissions();\n  const repo = useRepository(repoAddress);\n\n  const match = useRouteMatch<{tab?: string; selector: string}>([\n    '/workspace/:repoPath/pipelines/:selector/:tab?',\n    '/workspace/:repoPath/jobs/:selector/:tab?',\n    '/workspace/:repoPath/pipeline_or_job/:selector/:tab?',\n  ]);\n\n  const active = tabForPipelinePathComponent(match!.params.tab);\n  const explorerPath = explorerPathFromString(match!.params.selector);\n  const {pipelineName, snapshotId} = explorerPath;\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  // If using pipeline:mode tuple (crag flag), check for partition sets that are for this specific\n  // pipeline:mode tuple. Otherwise, just check for a pipeline name match.\n  const partitionSets = repo?.repository.partitionSets || [];\n  const hasPartitionSet = partitionSets.some(\n    (partitionSet) => partitionSet.pipelineName === pipelineName,\n  );\n\n  const navMetadata = useJobNavMetadata(repoAddress, pipelineName);\n  const hasLaunchpad = !navMetadata.assetNodes || navMetadata.assetNodes.length === 0;\n\n  const tabs = currentOrder\n    .filter(\n      (key) => (hasLaunchpad || key !== 'playground') && (hasPartitionSet || key !== 'partitions'),\n    )\n    .map(tabForKey(repoAddress, isJob, explorerPath));\n\n  return (\n    <>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        tags={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8, wrap: 'wrap'}}>\n            <Tag icon=\"job\">\n              {isJob ? 'Job in ' : 'Pipeline in '}\n              <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {snapshotId ? null : (\n              <JobMetadata\n                pipelineName={pipelineName}\n                repoAddress={repoAddress}\n                metadata={navMetadata}\n              />\n            )}\n          </Box>\n        }\n        tabs={\n          <Tabs size=\"large\" selectedTabId={active.title}>\n            {tabs.map((tab) => {\n              const {href, text, getPermissionsResult} = tab;\n              let permissionsResult = null;\n              if (getPermissionsResult) {\n                permissionsResult = getPermissionsResult(permissions);\n              }\n              const disabled = !!(permissionsResult && !permissionsResult.enabled);\n              const title =\n                permissionsResult && disabled ? (\n                  <Tooltip content={permissionsResult.disabledReason} placement=\"top\">\n                    {text}\n                  </Tooltip>\n                ) : (\n                  text\n                );\n              return <TabLink key={text} id={text} title={title} disabled={disabled} to={href} />;\n            })}\n          </Tabs>\n        }\n      />\n    </>\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonLink,\n  Checkbox,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tooltip,\n  Mono,\n} from '@dagster-io/ui';\nimport {History} from 'history';\nimport * as React from 'react';\nimport {useHistory} from 'react-router';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {SharedToaster} from '../app/DomUtils';\nimport {PipelineRunTag} from '../app/ExecutionSessionStorage';\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {LAUNCH_PARTITION_BACKFILL_MUTATION} from '../instance/BackfillUtils';\nimport {\n  LaunchPartitionBackfill,\n  LaunchPartitionBackfillVariables,\n} from '../instance/types/LaunchPartitionBackfill';\nimport {LaunchButton} from '../launchpad/LaunchButton';\nimport {TagContainer, TagEditor} from '../launchpad/TagEditor';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\nimport {RunStatus} from '../types/globalTypes';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRangeInput} from './PartitionRangeInput';\nimport {PartitionStatus} from './PartitionStatus';\nimport {BackfillSelectorQuery, BackfillSelectorQueryVariables} from './types/BackfillSelectorQuery';\n\nconst DEFAULT_RUN_LAUNCHER_NAME = 'DefaultRunLauncher';\n\ninterface BackfillOptions {\n  reexecute: boolean;\n  fromFailure: boolean;\n}\n\nexport const BackfillPartitionSelector: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  partitionData: {[name: string]: RunStatus | null};\n  pipelineName: string;\n  onLaunch?: (backfillId: string, stepQuery: string) => void;\n  onCancel?: () => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  onLaunch,\n  onCancel,\n  onSubmit,\n  repoAddress,\n  partitionData,\n  pipelineName,\n  partitionNames,\n}) => {\n  const history = useHistory();\n  const [selected, _setSelected] = React.useState<string[]>(\n    Object.keys(partitionData).filter(\n      (k) => !partitionData[k] || partitionData[k] === RunStatus.FAILURE,\n    ),\n  );\n  const [tagEditorOpen, setTagEditorOpen] = React.useState<boolean>(false);\n  const [tags, setTags] = React.useState<PipelineRunTag[]>([]);\n  const [query, setQuery] = React.useState<string>('');\n  const [options, setOptions] = React.useState<BackfillOptions>({\n    reexecute: false,\n    fromFailure: false,\n  });\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data} = useQuery<BackfillSelectorQuery, BackfillSelectorQueryVariables>(\n    BACKFILL_SELECTOR_QUERY,\n    {\n      variables: {\n        pipelineSelector: {\n          ...repositorySelector,\n          pipelineName,\n        },\n      },\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  const mounted = React.useRef(true);\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onLaunch]);\n\n  const onSuccess = (backfillId: string) => {\n    showBackfillSuccessToast(history, backfillId);\n    onLaunch?.(backfillId, query);\n  };\n\n  const onError = (data: LaunchPartitionBackfill | null | undefined) => {\n    showBackfillErrorToast(data);\n  };\n\n  if (!data) {\n    return (\n      <Box margin={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n    return (\n      <Box margin={20}>\n        <NonIdealState icon=\"error\" title=\"Could not fetch job details\" />\n      </Box>\n    );\n  }\n\n  const {pipelineSnapshotOrError: pipelineSnapshot, instance} = data;\n  const solids = explodeCompositesInHandleGraph(pipelineSnapshot.solidHandles).map(\n    (h: any) => h.solid,\n  );\n  const solidsFiltered = filterByQuery(solids, query);\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n  const stepRows = layout.boxes.map((box) => ({\n    x: box.x,\n    name: box.node.name,\n  }));\n\n  const usingDefaultRunLauncher = instance.runLauncher?.name === DEFAULT_RUN_LAUNCHER_NAME;\n\n  const isFailed = (name: string) =>\n    partitionData[name] === RunStatus.FAILURE ||\n    partitionData[name] === RunStatus.CANCELED ||\n    partitionData[name] === RunStatus.CANCELING;\n  const failedPartitions = partitionNames.filter(isFailed);\n  const missingPartitions = partitionNames.filter((name: string) => !partitionData[name]);\n  const successPartitions = partitionNames.filter(\n    (name: string) => partitionData[name] === RunStatus.SUCCESS,\n  );\n  const setSelected = (selection: string[]) => {\n    const selectionSet = new Set(selection);\n    // first order the partition names, according to the order given by partition names, which\n    // is the order determined from the partition definition set in user code\n    _setSelected(partitionNames.filter((name) => selectionSet.has(name)));\n    if (options.fromFailure && selection.filter((x) => !isFailed(x)).length > 0) {\n      setOptions({...options, fromFailure: false});\n    }\n  };\n\n  return (\n    <>\n      <DialogBody>\n        <Box flex={{direction: 'column', gap: 32}}>\n          <Section title=\"Partitions\">\n            <Box>\n              Select the set of partitions to include in the backfill. You can specify a range using\n              the text selector, or by dragging a range selection in the status indicator.\n            </Box>\n            <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n              <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n                {successPartitions.length ? (\n                  <Checkbox\n                    style={{marginBottom: 0, marginLeft: 10}}\n                    checked={successPartitions.every((x) => selected.includes(x))}\n                    label=\"Succeeded\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      if (e.target.checked) {\n                        setSelected(Array.from(new Set(selected.concat(successPartitions))));\n                      } else {\n                        setSelected(selected.filter((x) => !successPartitions.includes(x)));\n                      }\n                    }}\n                  />\n                ) : null}\n                {failedPartitions.length ? (\n                  <Checkbox\n                    style={{marginBottom: 0, marginLeft: 10}}\n                    checked={failedPartitions.every((x) => selected.includes(x))}\n                    label=\"Failed\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      if (e.target.checked) {\n                        setSelected(Array.from(new Set(selected.concat(failedPartitions))));\n                      } else {\n                        setSelected(selected.filter((x) => !failedPartitions.includes(x)));\n                      }\n                    }}\n                  />\n                ) : null}\n                {missingPartitions.length ? (\n                  <Checkbox\n                    style={{marginBottom: 0, marginLeft: 10}}\n                    checked={missingPartitions.every((x) => selected.includes(x))}\n                    label=\"Missing\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      if (e.target.checked) {\n                        setSelected(Array.from(new Set(selected.concat(missingPartitions))));\n                      } else {\n                        setSelected(selected.filter((x) => !missingPartitions.includes(x)));\n                      }\n                    }}\n                  />\n                ) : null}\n              </Box>\n              <Button\n                icon={<Icon name=\"close\" />}\n                disabled={!partitionNames.length}\n                style={{marginBottom: 0, marginLeft: 10}}\n                small={true}\n                onClick={() => {\n                  setSelected([]);\n                }}\n              >\n                Clear selection\n              </Button>\n            </Box>\n            <PartitionRangeInput\n              value={selected}\n              partitionNames={partitionNames}\n              onChange={setSelected}\n            />\n            <Box margin={{top: 8}}>\n              <PartitionStatus\n                partitionNames={partitionNames}\n                partitionData={partitionData}\n                selected={selected}\n                onSelect={(partitionNames: string[]) => {\n                  setSelected(partitionNames);\n                }}\n              />\n            </Box>\n          </Section>\n\n          {failedPartitions.length ? (\n            <Section title=\"Reexecution\">\n              <Checkbox\n                checked={options.fromFailure}\n                disabled={!selected.every(isFailed)}\n                onChange={() => {\n                  if (!options.fromFailure) {\n                    setSelected(failedPartitions);\n                  }\n                  setQuery('');\n                  setOptions({\n                    ...options,\n                    reexecute: !options.reexecute,\n                    fromFailure: !options.fromFailure,\n                  });\n                }}\n                label={\n                  <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                    <Box margin={{right: 4}}>Re-execute from failures</Box>\n                    <Tooltip\n                      placement=\"top\"\n                      content=\"For each partition, if the most recent run failed, launch a re-execution starting from the steps that failed. Only applies for selections of failed partitions.\"\n                    >\n                      <Icon name=\"info\" color={Colors.Gray500} />\n                    </Tooltip>\n                  </Box>\n                }\n              />\n            </Section>\n          ) : null}\n\n          <Section\n            title={\n              <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n                <Box margin={{right: 4}}>Step subset</Box>\n                <Tooltip\n                  placement=\"top\"\n                  content=\"Applies a step-selection to each run for the requested partitions.\"\n                >\n                  <Icon name=\"info\" color={Colors.Gray500} />\n                </Tooltip>\n              </Box>\n            }\n          >\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n              <GraphQueryInput\n                disabled={options.fromFailure}\n                width={520}\n                items={solids}\n                value={query}\n                placeholder=\"Type a step subset\"\n                onChange={setQuery}\n                autoApplyChanges={true}\n              />\n              {query ? (\n                <div style={{color: Colors.Gray500}}>\n                  {stepRows.length} step{stepRows.length === 1 ? '' : 's'} selected\n                </div>\n              ) : null}\n            </Box>\n          </Section>\n\n          <Section title=\"Tags\">\n            <TagEditor\n              tagsFromSession={tags}\n              onChange={setTags}\n              open={tagEditorOpen}\n              onRequestClose={() => setTagEditorOpen(false)}\n            />\n            {tags.length ? (\n              <div style={{border: `1px solid ${Colors.Gray300}`, borderRadius: 8, padding: 3}}>\n                <TagContainer tagsFromSession={tags} onRequestEdit={() => setTagEditorOpen(true)} />\n              </div>\n            ) : (\n              <div>\n                <Button onClick={() => setTagEditorOpen(true)}>Add tags to backfill runs</Button>\n              </div>\n            )}\n          </Section>\n\n          {!instance.daemonHealth.daemonStatus.healthy ? <DaemonNotRunningAlert /> : null}\n\n          {usingDefaultRunLauncher && !instance.runQueuingSupported ? (\n            <UsingDefaultLauncherAlert />\n          ) : null}\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onCancel}>\n          Cancel\n        </Button>\n        <LaunchBackfillButton\n          partitionNames={selected}\n          partitionSetName={partitionSetName}\n          reexecutionSteps={\n            !options.fromFailure && solidsFiltered.all.length < solids.length\n              ? stepRows.map((step) => step.name)\n              : undefined\n          }\n          fromFailure={options.fromFailure}\n          tags={tags}\n          onSubmit={onSubmit}\n          onSuccess={onSuccess}\n          onError={onError}\n          repoAddress={repoAddress}\n        />\n      </DialogFooter>\n    </>\n  );\n};\n\nconst LaunchBackfillButton: React.FC<{\n  partitionSetName: string;\n  partitionNames: string[];\n  reexecutionSteps?: string[];\n  fromFailure?: boolean;\n  tags?: PipelineRunTag[];\n  onSuccess?: (backfillId: string) => void;\n  onError: (data: LaunchPartitionBackfill | null | undefined) => void;\n  onSubmit: () => void;\n  repoAddress: RepoAddress;\n}> = ({\n  partitionSetName,\n  partitionNames,\n  reexecutionSteps,\n  fromFailure,\n  tags,\n  onSuccess,\n  onError,\n  onSubmit,\n  repoAddress,\n}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const mounted = React.useRef(true);\n  const [launchBackfill, {loading}] = useMutation<\n    LaunchPartitionBackfill,\n    LaunchPartitionBackfillVariables\n  >(LAUNCH_PARTITION_BACKFILL_MUTATION);\n\n  React.useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, [onSuccess]);\n\n  const onLaunch = async () => {\n    onSubmit();\n    const {data} = await launchBackfill({\n      variables: {\n        backfillParams: {\n          selector: {\n            partitionSetName,\n            repositorySelector,\n          },\n          partitionNames,\n          reexecutionSteps,\n          fromFailure,\n          tags,\n        },\n      },\n    });\n\n    if (!mounted.current) {\n      return;\n    }\n\n    if (data && data.launchPartitionBackfill.__typename === 'LaunchBackfillSuccess') {\n      onSuccess?.(data.launchPartitionBackfill.backfillId);\n    } else {\n      onError?.(data);\n    }\n  };\n\n  const count = partitionNames.length;\n  const reexecutionCount = reexecutionSteps?.length;\n\n  const title = () => {\n    if (loading) {\n      return `Submitting ${count} ${count === 1 ? 'run' : 'runs'}…`;\n    }\n\n    if (count) {\n      return `Submit ${count} ${count === 1 ? 'run' : 'runs'}`;\n    }\n\n    return 'Select partitions to submit';\n  };\n\n  const subtitle = () => {\n    return !loading && reexecutionCount\n      ? `(${reexecutionCount} selected ${reexecutionCount === 1 ? 'step' : 'steps'})`\n      : '';\n  };\n\n  const buttonTitle = [title(), subtitle()].join(' ');\n\n  return (\n    <LaunchButton\n      runCount={count}\n      config={{\n        title: buttonTitle,\n        icon: 'open_in_new',\n        disabled: !count || loading,\n        onClick: onLaunch,\n      }}\n    />\n  );\n};\n\nconst BACKFILL_SELECTOR_QUERY = gql`\n  query BackfillSelectorQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          handleID\n          ...GraphExplorerSolidHandleFragment\n          solid {\n            name\n            definition {\n              name\n            }\n            inputs {\n              dependsOn {\n                solid {\n                  name\n                }\n              }\n            }\n            outputs {\n              dependedBy {\n                solid {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    instance {\n      runLauncher {\n        name\n      }\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"BACKFILL\") {\n          id\n          healthy\n        }\n      }\n      runQueuingSupported\n    }\n  }\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n\nfunction messageForLaunchBackfillError(data: LaunchPartitionBackfill | null | undefined) {\n  const result = data?.launchPartitionBackfill;\n\n  let errors = <></>;\n  if (result?.__typename === 'PythonError' || result?.__typename === 'PartitionSetNotFoundError') {\n    errors = <PythonErrorInfo error={result} />;\n  } else if (result?.__typename === 'InvalidStepError') {\n    errors = <div>{`Invalid step: ${result.invalidStepKey}`}</div>;\n  } else if (result?.__typename === 'InvalidOutputError') {\n    errors = <div>{`Invalid output: ${result.invalidOutputName} for ${result.stepKey}`}</div>;\n  } else if (result && 'errors' in result) {\n    errors = (\n      <>\n        {result['errors'].map((error, idx) => (\n          <PythonErrorInfo error={error} key={idx} />\n        ))}\n      </>\n    );\n  }\n\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <div>An unexpected error occurred. This backfill was not launched.</div>\n      {errors ? (\n        <ButtonLink\n          color={Colors.White}\n          underline=\"always\"\n          onClick={() => {\n            showCustomAlert({\n              body: errors,\n            });\n          }}\n        >\n          View error\n        </ButtonLink>\n      ) : null}\n    </Group>\n  );\n}\n\nexport function showBackfillErrorToast(data: LaunchPartitionBackfill | null | undefined) {\n  SharedToaster.show({\n    message: messageForLaunchBackfillError(data),\n    icon: 'error',\n    intent: 'danger',\n  });\n}\n\nexport function showBackfillSuccessToast(history: History<unknown>, backfillId: string) {\n  SharedToaster.show({\n    intent: 'success',\n    message: (\n      <div>\n        Created backfill <Mono>{backfillId}</Mono>\n      </div>\n    ),\n    action: {\n      text: 'View',\n      onClick: () => history.push(`/instance/backfills`),\n    },\n  });\n}\n\nconst DaemonNotRunningAlert: React.FC = () => (\n  <Alert\n    intent=\"warning\"\n    title=\"The backfill daemon is not running.\"\n    description={\n      <div>\n        See the{' '}\n        <a\n          href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          dagster-daemon documentation\n        </a>{' '}\n        for more information on how to deploy the dagster-daemon process.\n      </div>\n    }\n  />\n);\n\nconst UsingDefaultLauncherAlert: React.FC = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Using the default run launcher <code>{DEFAULT_RUN_LAUNCHER_NAME}</code> for launching\n        backfills without a queued run coordinator is not advised.\n      </div>\n    }\n    description={\n      <div>\n        Check your instance configuration in <code>dagster.yaml</code> to either configure the{' '}\n        <a\n          href=\"https://docs.dagster.io/deployment/run-coordinator\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          queued run coordinator\n        </a>{' '}\n        or to configure a run launcher more appropriate for launching a large number of jobs.\n      </div>\n    }\n  />\n);\n\nconst Section = ({\n  title,\n  children,\n}: {\n  title: string | React.ReactNode;\n  children: React.ReactNode;\n}) => (\n  <Box flex={{direction: 'column', gap: 8}}>\n    <strong style={{display: 'block'}}>{title}</strong>\n    <Box\n      flex={{direction: 'column', gap: 8}}\n      padding={{top: 16}}\n      border={{width: 1, color: Colors.KeylineGray, side: 'top'}}\n    >\n      {children}\n    </Box>\n  </Box>\n);\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport styled from 'styled-components/macro';\n\nimport {colorHash} from '../app/Util';\n\ntype PointValue = number | null | undefined;\ntype Point = {x: string; y: PointValue};\n\ninterface PartitionGraphProps {\n  partitionNames: string[];\n  jobDataByPartition?: {[partitionName: string]: PointValue};\n  stepDataByPartition?: {[partitionName: string]: {[key: string]: PointValue[]}};\n  title?: string;\n  yLabel?: string;\n  isJob: boolean;\n  hiddenStepKeys?: string[];\n}\n\nexport const PartitionGraph = ({\n  partitionNames,\n  jobDataByPartition,\n  stepDataByPartition,\n  title,\n  yLabel,\n  isJob,\n  hiddenStepKeys,\n}: PartitionGraphProps) => {\n  const [hiddenPartitions, setHiddenPartitions] = React.useState<{[name: string]: boolean}>(\n    () => ({}),\n  );\n  const chart = React.useRef<any>(null);\n\n  const onGraphClick = React.useCallback((event: MouseEvent) => {\n    const instance = chart.current;\n    if (!instance) {\n      return;\n    }\n    const xAxis = instance.scales['x-axis-0'];\n    if (!xAxis) {\n      return;\n    }\n    const {offsetX, offsetY} = event;\n\n    const isChartClick =\n      event.type === 'click' &&\n      offsetX <= instance.chartArea.right &&\n      offsetX >= instance.chartArea.left &&\n      offsetY <= instance.chartArea.bottom &&\n      offsetY >= instance.chartArea.top;\n\n    if (!isChartClick || !event.shiftKey) {\n      return;\n    }\n\n    // category scale returns index here for some reason\n    const labelIndex = xAxis.getValueForPixel(offsetX);\n    const partitionName = instance.data.labels[labelIndex];\n    setHiddenPartitions((current) => ({\n      ...current,\n      [partitionName]: !current[partitionName],\n    }));\n  }, []);\n\n  const defaultOptions = React.useMemo(() => {\n    const titleOptions = title ? {display: true, text: title} : undefined;\n    const scales = yLabel\n      ? {\n          y: {\n            id: 'y',\n            title: {display: true, text: yLabel},\n          },\n          x: {\n            id: 'x',\n            title: {display: true, text: title},\n          },\n        }\n      : undefined;\n\n    return {\n      title: titleOptions,\n      animation: false,\n      scales,\n      plugins: {\n        legend: {\n          display: false,\n          onClick: (_e: MouseEvent, _legendItem: any) => {},\n        },\n      },\n      onClick: onGraphClick,\n      maintainAspectRatio: false,\n    };\n  }, [onGraphClick, title, yLabel]);\n\n  const buildDatasetData = () => {\n    const jobData: Point[] = [];\n    const stepData = {};\n\n    partitionNames.forEach((partitionName) => {\n      const hidden = !!hiddenPartitions[partitionName];\n      if (jobDataByPartition) {\n        jobData.push({\n          x: partitionName,\n          y: !hidden ? jobDataByPartition[partitionName] : undefined,\n        });\n      }\n\n      if (stepDataByPartition) {\n        const stepDataByKey = stepDataByPartition[partitionName];\n        Object.keys(stepDataByKey || {}).forEach((stepKey) => {\n          if (hiddenStepKeys?.includes(stepKey) || !stepDataByKey[stepKey]) {\n            return;\n          }\n          stepData[stepKey] = [\n            ...(stepData[stepKey] || []),\n            {\n              x: partitionName,\n              y: !hidden ? stepDataByKey[stepKey] : undefined,\n            },\n          ];\n        });\n      }\n    });\n\n    // stepData may have holes due to missing runs or missing steps.  For these to\n    // render properly, fill in the holes with `undefined` values.\n    Object.keys(stepData).forEach((stepKey) => {\n      stepData[stepKey] = _fillPartitions(partitionNames, stepData[stepKey]);\n    });\n\n    return {jobData, stepData};\n  };\n\n  const {jobData, stepData} = buildDatasetData();\n  const allLabel = isJob ? 'Total job' : 'Total pipeline';\n  const graphData = {\n    labels: partitionNames,\n    datasets: [\n      ...(!jobDataByPartition || (hiddenStepKeys && hiddenStepKeys.includes(allLabel))\n        ? []\n        : [\n            {\n              label: allLabel,\n              data: jobData,\n              borderColor: Colors.Gray500,\n              backgroundColor: 'rgba(0,0,0,0)',\n            },\n          ]),\n      ...Object.keys(stepData).map((stepKey) => ({\n        label: stepKey,\n        data: stepData[stepKey],\n        borderColor: colorHash(stepKey),\n        backgroundColor: 'rgba(0,0,0,0)',\n      })),\n    ],\n  };\n\n  // Passing graphData as a closure prevents ChartJS from trying to isEqual, which is fairly\n  // unlikely to save a render and is time consuming given the size of the data structure.\n  // We have a useMemo around the entire <PartitionGraphSet /> and there aren't many extra renders.\n  return (\n    <PartitionGraphContainer>\n      <Line type=\"line\" data={() => graphData} height={300} options={defaultOptions} ref={chart} />\n    </PartitionGraphContainer>\n  );\n};\n\nconst _fillPartitions = (partitionNames: string[], points: Point[]) => {\n  const pointData = {};\n  points.forEach((point) => {\n    pointData[point.x] = point.y;\n  });\n\n  return partitionNames.map((partitionName) => ({\n    x: partitionName,\n    y: pointData[partitionName],\n  }));\n};\n\nconst PartitionGraphContainer = styled.div`\n  display: flex;\n  color: ${Colors.Gray700};\n  padding: 24px 12px;\n  text-decoration: none;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Dialog,\n  Icon,\n  Tooltip,\n  Colors,\n  CursorPaginationControls,\n  CursorPaginationProps,\n  NonIdealState,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissions} from '../app/Permissions';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {OptionsContainer} from '../gantt/VizComponents';\nimport {useViewport} from '../gantt/useViewport';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from '../instance/BackfillTable';\nimport {RepositorySelector, RunStatus} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BackfillPartitionSelector} from './BackfillSelector';\nimport {PartitionGraph} from './PartitionGraph';\nimport {PartitionStatus} from './PartitionStatus';\nimport {PartitionStepStatus} from './PartitionStepStatus';\nimport {\n  PartitionsStatusQuery_partitionSetOrError_PartitionSet_partitionStatusesOrError_PartitionStatuses_results,\n  PartitionsStatusQuery_partitionSetOrError_PartitionSet,\n  PartitionsStatusQuery,\n  PartitionsStatusQueryVariables,\n} from './types/PartitionsStatusQuery';\nimport {PipelinePartitionsRootQuery_partitionSetsOrError_PartitionSets_results} from './types/PipelinePartitionsRootQuery';\nimport {usePartitionStepQuery} from './usePartitionStepQuery';\n\ntype PartitionSet = PipelinePartitionsRootQuery_partitionSetsOrError_PartitionSets_results;\ntype PartitionStatus = PartitionsStatusQuery_partitionSetOrError_PartitionSet_partitionStatusesOrError_PartitionStatuses_results;\n\nconst FAILED_STATUSES = [RunStatus.FAILURE, RunStatus.CANCELED, RunStatus.CANCELING];\n\nexport const PartitionView: React.FC<{\n  partitionSet: PartitionSet;\n  repoAddress: RepoAddress;\n}> = ({partitionSet, repoAddress}) => {\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const queryResult = useQuery<PartitionsStatusQuery, PartitionsStatusQueryVariables>(\n    PARTITIONS_STATUS_QUERY,\n    {\n      variables: {\n        partitionSetName: partitionSet.name,\n        repositorySelector,\n      },\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        if (\n          partitionSetOrError.__typename !== 'PartitionSet' ||\n          partitionSetOrError.partitionsOrError.__typename !== 'Partitions'\n        ) {\n          return null;\n        }\n\n        const partitionNames = partitionSetOrError.partitionsOrError.results.map(({name}) => name);\n\n        return (\n          <PartitionViewContent\n            partitionNames={partitionNames}\n            partitionSet={partitionSetOrError}\n            repoAddress={repoAddress}\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst PartitionViewContent: React.FC<{\n  partitionNames: string[];\n  partitionSet: PartitionsStatusQuery_partitionSetOrError_PartitionSet;\n  repoAddress: RepoAddress;\n}> = ({partitionSet, partitionNames, repoAddress}) => {\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n  const [showSteps, setShowSteps] = React.useState(false);\n  const [showBackfillSetup, setShowBackfillSetup] = React.useState(false);\n  const [blockDialog, setBlockDialog] = React.useState(false);\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const {canLaunchPartitionBackfill} = usePermissions();\n  const {viewport, containerProps} = useViewport();\n  const [backfillRefetchCounter, setBackfillRefetchCounter] = React.useState(0);\n  const partitions = usePartitionStepQuery(\n    partitionSet.name,\n    partitionNames,\n    pageSize,\n    [],\n    partitionSet.pipelineName,\n    offset,\n    !showSteps,\n  );\n\n  React.useEffect(() => {\n    if (viewport.width && !showSteps) {\n      // magical numbers to approximate the size of the window, which is calculated in the step\n      // status component.  This approximation is to make sure that the window does not jump as\n      // the pageSize gets recalculated\n      const _approximatePageSize = Math.ceil((viewport.width - 330) / 32) - 3;\n      setPageSize(_approximatePageSize);\n    }\n  }, [viewport.width, showSteps, setPageSize]);\n\n  const selectedPartitions = showSteps\n    ? partitionNames.slice(\n        Math.max(0, partitionNames.length - 1 - offset - pageSize),\n        partitionNames.length - offset,\n      )\n    : partitionNames;\n\n  const runDurationData: {[name: string]: number | undefined} = {};\n\n  const stepDurationData: {[name: string]: {[key: string]: (number | undefined)[]}} = {};\n  partitions.forEach((p) => {\n    if (!p.runsLoaded || p.runs.length === 0) {\n      return;\n    }\n    const lastRun = p.runs[p.runs.length - 1];\n    stepDurationData[p.name] = {};\n    lastRun.stepStats.forEach((s) => {\n      stepDurationData[p.name][s.stepKey] = [\n        s.endTime && s.startTime ? s.endTime - s.startTime : undefined,\n      ];\n    });\n  });\n  const statusData: {[name: string]: RunStatus | null} = {};\n  (partitionSet.partitionStatusesOrError.__typename === 'PartitionStatuses'\n    ? partitionSet.partitionStatusesOrError.results\n    : []\n  ).forEach((p) => {\n    statusData[p.partitionName] = p.runStatus;\n    if (selectedPartitions.includes(p.partitionName)) {\n      runDurationData[p.partitionName] = p.runDuration || undefined;\n    }\n  });\n\n  const onSubmit = React.useCallback(() => setBlockDialog(true), []);\n\n  return (\n    <div>\n      <Dialog\n        canEscapeKeyClose={!blockDialog}\n        canOutsideClickClose={!blockDialog}\n        onClose={() => setShowBackfillSetup(false)}\n        style={{width: 800, zIndex: 1000}}\n        title={`Launch ${partitionSet.pipelineName} backfill`}\n        isOpen={showBackfillSetup}\n      >\n        {showBackfillSetup && (\n          <BackfillPartitionSelector\n            partitionSetName={partitionSet.name}\n            partitionNames={partitionNames}\n            partitionData={statusData}\n            pipelineName={partitionSet.pipelineName}\n            onCancel={() => setShowBackfillSetup(false)}\n            onLaunch={(_backfillId, _stepQuery) => {\n              setBackfillRefetchCounter(backfillRefetchCounter + 1);\n              setShowBackfillSetup(false);\n            }}\n            onSubmit={onSubmit}\n            repoAddress={repoAddress}\n          />\n        )}\n      </Dialog>\n\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n        padding={16}\n      >\n        <div>\n          <strong>Status</strong>\n        </div>\n        <Box flex={{gap: 8}}>\n          <Button onClick={() => setShowSteps(!showSteps)} active={showBackfillSetup}>\n            {showSteps ? 'Hide per-step status' : 'Show per-step status'}\n          </Button>\n          {canLaunchPartitionBackfill.enabled ? (\n            <Button\n              onClick={() => setShowBackfillSetup(!showBackfillSetup)}\n              icon={<Icon name=\"add_circle\" />}\n              active={showBackfillSetup}\n            >\n              Launch backfill...\n            </Button>\n          ) : (\n            <Tooltip content={canLaunchPartitionBackfill.disabledReason}>\n              <Button icon={<Icon name=\"add_circle\" />} disabled>\n                Launch backfill...\n              </Button>\n            </Tooltip>\n          )}\n        </Box>\n      </Box>\n      <Box\n        flex={{justifyContent: 'space-between', direction: 'row', alignItems: 'center'}}\n        border={{width: 1, side: 'bottom', color: Colors.KeylineGray}}\n      >\n        <CountBox count={partitionNames.length} label=\"Total partitions\" />\n        <CountBox\n          count={\n            partitionNames.filter((x) => {\n              const status = statusData[x];\n              return status && FAILED_STATUSES.includes(status);\n            }).length\n          }\n          label=\"Failed partitions\"\n        />\n        <CountBox\n          count={partitionNames.filter((x) => !statusData[x]).length}\n          label=\"Missing partitions\"\n        />\n      </Box>\n      <Box margin={16}>\n        <div {...containerProps}>\n          <PartitionStatus\n            partitionNames={partitionNames}\n            partitionData={statusData}\n            selected={showSteps ? selectedPartitions : undefined}\n            selectionWindowSize={pageSize}\n            onClick={(partitionName) => {\n              const maxIdx = partitionNames.length - 1;\n              const selectedIdx = partitionNames.indexOf(partitionName);\n              const nextOffset = Math.min(\n                maxIdx,\n                Math.max(0, maxIdx - selectedIdx - 0.5 * pageSize),\n              );\n              setOffset(nextOffset);\n              if (!showSteps) {\n                setShowSteps(true);\n              }\n            }}\n            tooltipMessage=\"Click to view per-step status\"\n          />\n        </div>\n        {showSteps ? (\n          <Box margin={{top: 16}}>\n            <PartitionStepStatus\n              partitionNames={partitionNames}\n              partitions={partitions}\n              pipelineName={partitionSet.pipelineName}\n              repoAddress={repoAddress}\n              setPageSize={setPageSize}\n              offset={offset}\n              setOffset={setOffset}\n            />\n          </Box>\n        ) : null}\n      </Box>\n      <OptionsContainer>\n        <strong>Run duration</strong>\n      </OptionsContainer>\n      <Box margin={24}>\n        <PartitionGraph\n          isJob={true}\n          title=\"Execution Time by Partition\"\n          yLabel=\"Execution time (secs)\"\n          partitionNames={showSteps ? selectedPartitions : partitionNames}\n          jobDataByPartition={runDurationData}\n        />\n      </Box>\n      {showSteps ? (\n        <>\n          <OptionsContainer>\n            <strong>Step duration</strong>\n          </OptionsContainer>\n          <Box margin={24}>\n            <PartitionGraph\n              isJob={true}\n              title=\"Execution Time by Partition\"\n              yLabel=\"Execution time (secs)\"\n              partitionNames={selectedPartitions}\n              stepDataByPartition={stepDurationData}\n            />\n          </Box>\n        </>\n      ) : null}\n      <OptionsContainer>\n        <strong>Backfill History</strong>\n      </OptionsContainer>\n      <Box margin={16}>\n        <JobBackfills\n          partitionSet={partitionSet}\n          repositorySelector={repositorySelector}\n          partitionNames={partitionNames}\n          refetchCounter={backfillRefetchCounter}\n        />\n      </Box>\n    </div>\n  );\n};\n\nconst BACKFILL_PAGE_SIZE = 10;\n\nconst JobBackfills = ({\n  partitionSet,\n  partitionNames,\n  repositorySelector,\n  refetchCounter,\n}: {\n  partitionSet: PartitionsStatusQuery_partitionSetOrError_PartitionSet;\n  partitionNames: string[];\n  repositorySelector: RepositorySelector;\n  refetchCounter: number;\n}) => {\n  const [cursorStack, setCursorStack] = React.useState<string[]>(() => []);\n  const [cursor, setCursor] = React.useState<string | undefined>();\n  const queryResult = useQuery(JOB_BACKFILLS_QUERY, {\n    variables: {\n      partitionSetName: partitionSet.name,\n      repositorySelector,\n      cursor,\n      limit: BACKFILL_PAGE_SIZE,\n    },\n    partialRefetch: true,\n  });\n\n  const refetch = queryResult.refetch;\n  React.useEffect(() => {\n    refetchCounter && refetch();\n  }, [refetch, refetchCounter]);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetOrError}) => {\n        const {backfills, pipelineName} = partitionSetOrError;\n\n        if (!backfills.length) {\n          return <NonIdealState title={`No backfills for ${pipelineName}`} icon=\"no-results\" />;\n        }\n\n        const paginationProps: CursorPaginationProps = {\n          hasPrevCursor: !!cursor,\n          hasNextCursor: backfills && backfills.length === BACKFILL_PAGE_SIZE,\n          popCursor: () => {\n            const nextStack = [...cursorStack];\n            setCursor(nextStack.pop());\n            setCursorStack(nextStack);\n          },\n          advanceCursor: () => {\n            if (cursor) {\n              setCursorStack((current) => [...current, cursor]);\n            }\n            const nextCursor = backfills && backfills[backfills.length - 1].backfillId;\n            if (!nextCursor) {\n              return;\n            }\n            setCursor(nextCursor);\n          },\n          reset: () => {\n            setCursorStack([]);\n            setCursor(undefined);\n          },\n        };\n        return (\n          <>\n            <BackfillTable\n              backfills={backfills}\n              refetch={refetch}\n              showPartitionSet={false}\n              allPartitions={partitionNames}\n            />\n            <CursorPaginationControls {...paginationProps} />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst CountBox: React.FC<{\n  count: number;\n  label: string;\n}> = ({count, label}) => (\n  <div style={{flex: 1, borderLeft: `1px solid ${Colors.KeylineGray}`, padding: 16}}>\n    <div style={{fontSize: 18, marginBottom: 4}}>\n      <strong>{count}</strong>\n    </div>\n    <div>{label}</div>\n  </div>\n);\n\nconst PARTITIONS_STATUS_QUERY = gql`\n  query PartitionsStatusQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        name\n        pipelineName\n        partitionsOrError {\n          ... on Partitions {\n            results {\n              name\n            }\n          }\n        }\n        partitionStatusesOrError {\n          __typename\n          ... on PartitionStatuses {\n            results {\n              id\n              partitionName\n              runStatus\n              runDuration\n            }\n          }\n          ...PythonErrorFragment\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst JOB_BACKFILLS_QUERY = gql`\n  query JobBackfillsQuery(\n    $partitionSetName: String!\n    $repositorySelector: RepositorySelector!\n    $cursor: String\n    $limit: Int\n  ) {\n    partitionSetOrError(\n      repositorySelector: $repositorySelector\n      partitionSetName: $partitionSetName\n    ) {\n      ... on PartitionSet {\n        id\n        pipelineName\n        backfills(cursor: $cursor, limit: $limit) {\n          ...BackfillTableFragment\n        }\n      }\n    }\n  }\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {explorerPathFromString, useStripSnapshotFromPath} from '../pipelines/PipelinePathUtils';\nimport {useJobTitle} from '../pipelines/useJobTitle';\nimport {Loading} from '../ui/Loading';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionView} from './PartitionView';\nimport {\n  PipelinePartitionsRootQuery,\n  PipelinePartitionsRootQueryVariables,\n} from './types/PipelinePartitionsRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelinePartitionsRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const explorerPath = explorerPathFromString(pipelinePath);\n  const {pipelineName} = explorerPath;\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath(params);\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<PipelinePartitionsRootQuery, PipelinePartitionsRootQueryVariables>(\n    PIPELINE_PARTITIONS_ROOT_QUERY,\n    {\n      variables: {repositorySelector, pipelineName},\n      fetchPolicy: 'network-only',\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({partitionSetsOrError}) => {\n        if (partitionSetsOrError.__typename !== 'PartitionSets') {\n          return (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"error\"\n                title=\"Partitions\"\n                description={partitionSetsOrError.message}\n              />\n            </Box>\n          );\n        }\n\n        if (!partitionSetsOrError.results.length) {\n          return (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"error\"\n                title=\"Partitions\"\n                description={\n                  <p>\n                    There are no partition sets defined for {isJob ? 'job' : 'pipeline'}{' '}\n                    <code>{pipelineName}</code>.\n                  </p>\n                }\n              />\n            </Box>\n          );\n        }\n\n        return (\n          <PartitionView partitionSet={partitionSetsOrError.results[0]} repoAddress={repoAddress} />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst PIPELINE_PARTITIONS_ROOT_QUERY = gql`\n  query PipelinePartitionsRootQuery(\n    $pipelineName: String!\n    $repositorySelector: RepositorySelector!\n  ) {\n    partitionSetsOrError(pipelineName: $pipelineName, repositorySelector: $repositorySelector) {\n      ... on PipelineNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n      ... on PartitionSets {\n        results {\n          id\n          mode\n          name\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {Redirect, useLocation, useParams} from 'react-router-dom';\n\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {explorerPathFromString} from './PipelinePathUtils';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOrJobDisambiguationRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const location = useLocation();\n  const {pipelinePath} = useParams<{pipelinePath: string}>();\n\n  const {pipelineName: pipelineOrJobName} = explorerPathFromString(pipelinePath);\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineOrJobName);\n  const {pathname, search} = location;\n\n  const replacedPath = pathname.replace('/pipeline_or_job/', isJob ? '/jobs/' : '/pipelines/');\n\n  return <Redirect to={`${replacedPath}${search}`} />;\n};\n","import * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineExplorerContainer} from './PipelineExplorerRoot';\nimport {\n  explorerPathFromString,\n  explorerPathToString,\n  ExplorerPath,\n  useStripSnapshotFromPath,\n} from './PipelinePathUtils';\nimport {useJobTitle} from './useJobTitle';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineOverviewRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const history = useHistory();\n  const location = useLocation();\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString(params['0']);\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, explorerPath.pipelineName);\n\n  useJobTitle(explorerPath, isJob);\n  useStripSnapshotFromPath({pipelinePath: explorerPathToString(explorerPath)});\n\n  const onChangeExplorerPath = React.useCallback(\n    (path: ExplorerPath, action: 'push' | 'replace') => {\n      history[action]({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          repoAddress,\n          `/${isJob ? 'jobs' : 'pipelines'}/${explorerPathToString(path)}`,\n        ),\n      });\n    },\n    [history, location.search, repoAddress, isJob],\n  );\n\n  const onNavigateToForeignNode = React.useCallback(\n    (node: AssetLocation) => {\n      if (!node.jobName || !node.opNames.length || !node.repoAddress) {\n        // This op has no definition in any loaded repository (source asset).\n        // The best we can do is show the asset page. This will still be mostly empty,\n        // but there can be a description.\n        history.push(assetDetailsPathForKey(node.assetKey, {view: 'definition'}));\n        return;\n      }\n\n      // Note: asset location can be in another job AND in another repo! Need\n      // to build a full job URL using the `node` info here.\n      history.replace({\n        search: location.search,\n        pathname: workspacePathFromAddress(\n          node.repoAddress,\n          `/jobs/${explorerPathToString({\n            ...explorerPath,\n            opNames: [tokenForAssetKey(node.assetKey)],\n            opsQuery: '',\n            pipelineName: node.jobName!,\n          })}`,\n        ),\n      });\n    },\n    [explorerPath, history, location.search],\n  );\n\n  return (\n    <PipelineExplorerContainer\n      repoAddress={repoAddress}\n      explorerPath={explorerPath}\n      onChangeExplorerPath={onChangeExplorerPath}\n      onNavigateToForeignNode={onNavigateToForeignNode}\n    />\n  );\n};\n","import * as React from 'react';\nimport {Redirect, Route, RouteComponentProps, Switch} from 'react-router-dom';\n\nimport {JobLaunchpad} from '../launchpad/LaunchpadRoot';\nimport {LaunchpadSetupFromRunRoot} from '../launchpad/LaunchpadSetupFromRunRoot';\nimport {LaunchpadSetupRoot} from '../launchpad/LaunchpadSetupRoot';\nimport {PipelineNav} from '../nav/PipelineNav';\nimport {PipelinePartitionsRoot} from '../partitions/PipelinePartitionsRoot';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PipelineOrJobDisambiguationRoot} from './PipelineOrJobDisambiguationRoot';\nimport {PipelineOverviewRoot} from './PipelineOverviewRoot';\nimport {PipelineRunsRoot} from './PipelineRunsRoot';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const PipelineRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        minWidth: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <PipelineNav repoAddress={repoAddress} />\n      <Switch>\n        <Route path=\"/workspace/:repoPath/pipeline_or_job/:pipelinePath/(/?.*)\">\n          <PipelineOrJobDisambiguationRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/playground/setup',\n            '/workspace/:repoPath/jobs/:pipelinePath/playground/setup',\n          ]}\n        >\n          <LaunchpadSetupRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/playground/setup-from-run/:runId',\n            '/workspace/:repoPath/jobs/:pipelinePath/playground/setup-from-run/:runId',\n          ]}\n        >\n          <LaunchpadSetupFromRunRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/playground',\n            '/workspace/:repoPath/jobs/:pipelinePath/playground',\n          ]}\n        >\n          <JobLaunchpad repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/runs/:runId',\n            '/workspace/:repoPath/jobs/:pipelinePath/runs/:runId',\n          ]}\n          render={(props: RouteComponentProps<{runId: string}>) => (\n            <Redirect to={`/instance/runs/${props.match.params.runId}`} />\n          )}\n        />\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/runs',\n            '/workspace/:repoPath/jobs/:pipelinePath/runs',\n          ]}\n        >\n          <PipelineRunsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/partitions',\n            '/workspace/:repoPath/jobs/:pipelinePath/partitions',\n          ]}\n        >\n          <PipelinePartitionsRoot repoAddress={repoAddress} />\n        </Route>\n        <Route\n          path={[\n            '/workspace/:repoPath/pipelines/:pipelinePath/overview',\n            '/workspace/:repoPath/jobs/:pipelinePath/overview',\n          ]}\n          render={(props) => (\n            <Redirect to={`/workspace/${props.match.url.replace(/\\/overview$/i, '')}`} />\n          )}\n        />\n        <Route path={['/workspace/:repoPath/pipelines/(/?.*)', '/workspace/:repoPath/jobs/(/?.*)']}>\n          <PipelineOverviewRoot repoAddress={repoAddress} />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","import {Colors} from '@dagster-io/ui';\nimport {ActiveElement, TimeUnit, TooltipItem} from 'chart.js';\nimport * as React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport {InstigationTickStatus} from '../types/globalTypes';\n\nimport {\n  TickHistoryQuery_instigationStateOrError_InstigationState_nextTick,\n  TickHistoryQuery_instigationStateOrError_InstigationState_ticks,\n} from './types/TickHistoryQuery';\n\ntype FutureTick = TickHistoryQuery_instigationStateOrError_InstigationState_nextTick;\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.Blue500,\n  [InstigationTickStatus.FAILURE]: Colors.Red500,\n  [InstigationTickStatus.STARTED]: Colors.Gray400,\n  [InstigationTickStatus.SKIPPED]: Colors.Yellow500,\n};\n\nconst REFRESH_INTERVAL = 100;\n\nexport const LiveTickTimeline: React.FC<{\n  ticks: InstigationTick[];\n  nextTick: FutureTick | null;\n  onHoverTick: (InstigationTick?: any) => void;\n  onSelectTick: (InstigationTick?: any) => void;\n}> = ({ticks, nextTick, onHoverTick, onSelectTick}) => {\n  const [now, setNow] = React.useState<number>(Date.now());\n  const [graphNow, setGraphNow] = React.useState<number>(Date.now());\n  const [isPaused, setPaused] = React.useState<boolean>(false);\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      !isPaused && setNow(Date.now());\n    }, REFRESH_INTERVAL);\n    return () => clearInterval(interval);\n  });\n\n  React.useEffect(() => {\n    if (!isPaused && (!nextTick || now < 1000 * nextTick.timestamp)) {\n      setGraphNow(now);\n    }\n  }, [isPaused, nextTick, now]);\n\n  const isAtFutureTick = nextTick && 1000 * nextTick.timestamp <= now;\n  const PULSE_DURATION = 2000;\n  const nextTickRadius = isAtFutureTick\n    ? 4 + Math.sin((2 * Math.PI * (now % PULSE_DURATION)) / PULSE_DURATION)\n    : 3;\n\n  const tickData = ticks.map((tick) => ({x: 1000 * tick.timestamp, y: 0}));\n  const tickColors = ticks.map((tick) => COLOR_MAP[tick.status]);\n  const tickRadii = Array(ticks.length).fill(3);\n\n  if (nextTick) {\n    tickData.push({x: 1000 * nextTick.timestamp, y: 0});\n    tickColors.push(Colors.Gray200);\n    tickRadii.push(nextTickRadius);\n  }\n\n  const graphData = {\n    labels: ['ticks'],\n    datasets: [\n      {\n        label: 'now',\n        data: [\n          {x: graphNow - 60000 * 10, y: 0},\n          {x: graphNow, y: 0},\n        ],\n        borderColor: Colors.Gray100,\n        borderWidth: 1,\n        pointBorderWidth: 2,\n        pointBorderColor: Colors.Gray200,\n        pointRadius: 1,\n        pointHoverRadius: 1,\n      },\n      {\n        label: 'ticks',\n        data: tickData,\n        borderColor: Colors.Gray100,\n        borderWidth: 0,\n        backgroundColor: 'rgba(0,0,0,0)',\n        pointBackgroundColor: 'rgba(0,0,0,0)',\n        pointBorderWidth: 2,\n        pointBorderColor: tickColors,\n        pointRadius: tickRadii,\n        pointHoverBorderWidth: 2,\n        pointHoverRadius: 5,\n        pointHoverBorderColor: tickColors,\n      },\n    ],\n  };\n\n  const options = {\n    animation: {\n      duration: 0,\n    },\n\n    scales: {\n      y: {id: 'y', display: false, grid: {display: false}, title: {display: false}},\n      x: {\n        id: 'x',\n        type: 'time',\n        title: {\n          display: false,\n        },\n        grid: {display: true},\n        bounds: 'ticks',\n        min: graphNow - 60000 * 5, // 5 minutes ago\n        max: graphNow + 60000, // 1 minute from now\n        time: {\n          minUnit: 'minute' as TimeUnit,\n        },\n      },\n    },\n\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        displayColors: false,\n        callbacks: {\n          label(tooltipItem: TooltipItem<any>) {\n            if (!tooltipItem.datasetIndex) {\n              // this is the current time\n              return 'Current time';\n            }\n            if (tooltipItem.dataIndex === undefined) {\n              return '';\n            }\n            if (tooltipItem.dataIndex === ticks.length) {\n              // This is the future tick\n              return '';\n            }\n            const tick = ticks[tooltipItem.dataIndex];\n            const cursorLabel = tick.cursor ? `Cursor: ${tick.cursor}\\n` : '';\n\n            // returning an array of strings ensures that each string is displayed on its own line\n            // in the tooltip\n\n            if (tick.status === InstigationTickStatus.SKIPPED && tick.skipReason) {\n              return cursorLabel ? [tick.skipReason, cursorLabel] : tick.skipReason;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.runIds.length) {\n              return cursorLabel ? [...tick.runIds, cursorLabel] : tick.runIds;\n            }\n            if (tick.status === InstigationTickStatus.SUCCESS && tick.originRunIds) {\n              return cursorLabel ? [...tick.originRunIds, cursorLabel] : tick.originRunIds;\n            }\n            if (tick.status === InstigationTickStatus.FAILURE && tick.error?.message) {\n              return cursorLabel ? [tick.error.message, cursorLabel] : tick.error.message;\n            }\n            return cursorLabel;\n          },\n        },\n      },\n    },\n\n    onClick: (_event: MouseEvent, activeElements: any[]) => {\n      if (!activeElements.length) {\n        return;\n      }\n      const [item] = activeElements;\n      if (item.datasetIndex === undefined || item.index === undefined) {\n        return;\n      }\n      const tick = ticks[item.index];\n      onSelectTick(tick);\n    },\n\n    onHover: (event: MouseEvent, elements: ActiveElement[]) => {\n      if (event?.target instanceof HTMLElement) {\n        event.target.style.cursor = elements.length ? 'pointer' : 'default';\n      }\n      if (elements.length && !isPaused) {\n        setPaused(true);\n        const [element] = elements.filter(\n          (x) => x.datasetIndex === 1 && x.index !== undefined && x.index < ticks.length,\n        );\n        if (!element) {\n          return;\n        }\n        const tick = ticks[element.index];\n        onHoverTick(tick);\n      } else if (!elements.length && isPaused) {\n        setPaused(false);\n        onHoverTick(undefined);\n      }\n    },\n\n    maintainAspectRatio: false,\n  };\n\n  return <Line type=\"line\" data={graphData} height={150} options={options} key=\"100%\" />;\n};\n","import {gql, useQuery} from '@apollo/client';\nimport 'chartjs-adapter-date-fns';\nimport {Button, DialogBody, DialogFooter, Dialog, Group, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {copyValue} from '../app/DomUtils';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationSelector, InstigationTickStatus} from '../types/globalTypes';\n\nimport {FailedRunList, RunList, TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/SelectedTickQuery';\n\nexport const TickDetailsDialog: React.FC<{\n  timestamp: number | undefined;\n  instigationSelector: InstigationSelector;\n  onClose: () => void;\n}> = ({timestamp, instigationSelector, onClose}) => {\n  const {data} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(JOB_SELECTED_TICK_QUERY, {\n    variables: {instigationSelector, timestamp: timestamp || 0},\n    fetchPolicy: 'cache-and-network',\n    skip: !timestamp,\n    partialRefetch: true,\n  });\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  return (\n    <Dialog\n      isOpen={!!tick}\n      onClose={onClose}\n      style={{\n        width: tick && tick.status === InstigationTickStatus.SKIPPED ? '50vw' : '90vw',\n      }}\n      title={tick ? <TimestampDisplay timestamp={tick.timestamp} /> : null}\n    >\n      {tick ? (\n        <DialogBody>\n          {tick.status === InstigationTickStatus.SUCCESS ? (\n            tick.runIds.length ? (\n              <RunList runIds={tick.runIds} />\n            ) : (\n              <FailedRunList originRunIds={tick.originRunIds} />\n            )\n          ) : null}\n          {tick.status === InstigationTickStatus.SKIPPED ? (\n            <Group direction=\"row\" spacing={16}>\n              <TickTag tick={tick} />\n              <span>{tick.skipReason || 'No skip reason provided'}</span>\n            </Group>\n          ) : tick.status === InstigationTickStatus.FAILURE && tick.error ? (\n            <PythonErrorInfo error={tick.error} />\n          ) : undefined}\n        </DialogBody>\n      ) : null}\n      <DialogFooter>\n        <Button\n          icon={<Icon name=\"copy_to_clipboard\" />}\n          onClick={(e) => copyValue(e, window.location.href)}\n        >\n          Copy Link\n        </Button>\n        <Button intent=\"primary\" onClick={onClose}>\n          OK\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $timestamp: Float!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        tick(timestamp: $timestamp) {\n          id\n          status\n          timestamp\n          skipReason\n          runIds\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          ...TickTagFragment\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n","import 'chartjs-adapter-date-fns';\n\nimport {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Checkbox,\n  Colors,\n  CursorHistoryControls,\n  NonIdealState,\n  Spinner,\n  Table,\n  Subheading,\n  FontFamily,\n  Icon,\n  IconWrapper,\n} from '@dagster-io/ui';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {SharedToaster} from '../app/DomUtils';\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {ONE_MONTH, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {InstigationTickStatus, InstigationType} from '../types/globalTypes';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {TickTag, TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {RunStatusLink, RUN_STATUS_FRAGMENT} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {RunStatusFragment} from './types/RunStatusFragment';\nimport {\n  TickHistoryQuery,\n  TickHistoryQueryVariables,\n  TickHistoryQuery_instigationStateOrError_InstigationState_ticks,\n} from './types/TickHistoryQuery';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = TickHistoryQuery_instigationStateOrError_InstigationState_ticks;\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nconst PAGE_SIZE = 25;\ninterface ShownStatusState {\n  [InstigationTickStatus.SUCCESS]: boolean;\n  [InstigationTickStatus.FAILURE]: boolean;\n  [InstigationTickStatus.STARTED]: boolean;\n  [InstigationTickStatus.SKIPPED]: boolean;\n}\n\nconst DEFAULT_SHOWN_STATUS_STATE = {\n  [InstigationTickStatus.SUCCESS]: true,\n  [InstigationTickStatus.FAILURE]: true,\n  [InstigationTickStatus.STARTED]: true,\n  [InstigationTickStatus.SKIPPED]: false,\n};\nconst STATUS_TEXT_MAP = {\n  [InstigationTickStatus.SUCCESS]: 'Requested',\n  [InstigationTickStatus.FAILURE]: 'Failed',\n  [InstigationTickStatus.STARTED]: 'Started',\n  [InstigationTickStatus.SKIPPED]: 'Skipped',\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n}) => {\n  const [shownStates, setShownStates] = useQueryPersistedState<ShownStatusState>({\n    encode: (states) => {\n      const queryState = {};\n      Object.keys(states).map((state) => {\n        queryState[state.toLowerCase()] = String(states[state]);\n      });\n      return queryState;\n    },\n    decode: (queryState) => {\n      const status: ShownStatusState = {...DEFAULT_SHOWN_STATUS_STATE};\n      Object.keys(DEFAULT_SHOWN_STATUS_STATE).forEach((state) => {\n        if (state.toLowerCase() in queryState) {\n          status[state] = !(queryState[state.toLowerCase()] === 'false');\n        }\n      });\n\n      return status;\n    },\n  });\n  const copyToClipboard = useCopyToClipboard();\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = Object.keys(shownStates)\n    .filter((status) => shownStates[status])\n    .map((status) => status as InstigationTickStatus);\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: JOB_TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {ticks, instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && statuses.length === Object.keys(DEFAULT_SHOWN_STATUS_STATE).length) {\n    return null;\n  }\n\n  const StatusFilter = ({status}: {status: InstigationTickStatus}) => (\n    <Checkbox\n      label={STATUS_TEXT_MAP[status]}\n      checked={shownStates[status]}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setShownStates({...shownStates, [status]: e.target.checked});\n      }}\n    />\n  );\n\n  return (\n    <>\n      <Box margin={{vertical: 8, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={InstigationTickStatus.STARTED} />\n            <StatusFilter status={InstigationTickStatus.SUCCESS} />\n            <StatusFilter status={InstigationTickStatus.FAILURE} />\n            <StatusFilter status={InstigationTickStatus.SKIPPED} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Runs</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick) => (\n              <tr key={tick.id}>\n                <td>\n                  <TimestampDisplay\n                    timestamp={tick.timestamp}\n                    timeFormat={{showTimezone: false, showSeconds: true}}\n                  />\n                </td>\n                <td>\n                  <TickTag tick={tick} />\n                </td>\n                {instigationType === InstigationType.SENSOR ? (\n                  <td style={{width: 120}}>\n                    {tick.cursor ? (\n                      <Box flex={{direction: 'row', alignItems: 'center'}}>\n                        <Box style={{fontFamily: FontFamily.monospace, marginRight: 10}}>\n                          <>{truncate(tick.cursor || '')}</>\n                        </Box>\n                        <CopyButton\n                          onClick={() => {\n                            copyToClipboard(tick.cursor || '');\n                            SharedToaster.show({\n                              message: <div>Copied value</div>,\n                              intent: 'success',\n                            });\n                          }}\n                        >\n                          <Icon name=\"assignment\" />\n                        </CopyButton>\n                      </Box>\n                    ) : (\n                      <>&mdash;</>\n                    )}\n                  </td>\n                ) : null}\n                <td>\n                  {tick.runIds.length ? (\n                    tick.runs.map((run: RunStatusFragment) => (\n                      <>\n                        <RunStatusLink key={run.id} run={run} />\n                      </>\n                    ))\n                  ) : (\n                    <>&mdash;</>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  onHighlightRunIds,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n}) => {\n  const [selectedTime, setSelectedTime] = useQueryPersistedState<number | undefined>({\n    encode: (timestamp) => ({time: timestamp}),\n    decode: (qs) => (qs['time'] ? Number(qs['time']) : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(\n    JOB_TICK_HISTORY_QUERY,\n    {\n      variables: {instigationSelector, limit: 15},\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, pollingPaused ? ONE_MONTH : 1000);\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <>\n        <Box\n          padding={{top: 16, horizontal: 24}}\n          border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        >\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  const {ticks, nextTick} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTime(tick ? tick.timestamp : undefined);\n  };\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      onHighlightRunIds && onHighlightRunIds(tick.runIds);\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        timestamp={selectedTime}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n        <LiveTickTimeline\n          ticks={ticks}\n          nextTick={nextTick}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n        />\n      </Box>\n    </>\n  );\n};\n\nconst JOB_TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      __typename\n      ... on InstigationState {\n        id\n        instigationType\n        nextTick {\n          timestamp\n        }\n        ticks(dayRange: $dayRange, limit: $limit, cursor: $cursor, statuses: $statuses) {\n          id\n          status\n          timestamp\n          cursor\n          skipReason\n          runIds\n          runs {\n            id\n            status\n            ...RunStatusFragment\n          }\n          originRunIds\n          error {\n            ...PythonErrorFragment\n          }\n          ...TickTagFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_STATUS_FRAGMENT}\n`;\n\nconst CopyButton = styled.button`\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  padding: 8px;\n  margin: -6px;\n  outline: none;\n\n  ${IconWrapper} {\n    background-color: ${Colors.Gray600};\n    transition: background-color 100ms;\n  }\n\n  :hover ${IconWrapper} {\n    background-color: ${Colors.Gray800};\n  }\n\n  :focus ${IconWrapper} {\n    background-color: ${Colors.Link};\n  }\n`;\n","import {\n  Box,\n  ButtonLink,\n  Colors,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Code,\n  Heading,\n  Mono,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {useCopyToClipboard} from '../app/browser';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {InstigationStatus, InstigationType} from '../types/globalTypes';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SchedulePartitionStatus} from './SchedulePartitionStatus';\nimport {ScheduleSwitch} from './ScheduleSwitch';\nimport {TimestampDisplay} from './TimestampDisplay';\nimport {humanCronString} from './humanCronString';\nimport {ScheduleFragment} from './types/ScheduleFragment';\n\nconst TIME_FORMAT = {showSeconds: false, showTimezone: true};\n\nexport const ScheduleDetails: React.FC<{\n  schedule: ScheduleFragment;\n  repoAddress: RepoAddress;\n  refreshState: QueryRefreshState;\n}> = (props) => {\n  const {repoAddress, schedule, refreshState} = props;\n  const {cronSchedule, executionTimezone, futureTicks, name, partitionSet, pipelineName} = schedule;\n  const copyToClipboard = useCopyToClipboard();\n\n  const repo = useRepository(repoAddress);\n  const isJob = isThisThingAJob(repo, pipelineName);\n\n  const [copyText, setCopyText] = React.useState('Click to copy');\n\n  // Restore the tooltip text after a delay.\n  React.useEffect(() => {\n    let token: any;\n    if (copyText === 'Copied!') {\n      token = setTimeout(() => {\n        setCopyText('Click to copy');\n      }, 2000);\n    }\n    return () => {\n      token && clearTimeout(token);\n    };\n  }, [copyText]);\n\n  const {scheduleState} = schedule;\n  const {status, id, ticks} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n\n  const copyId = () => {\n    copyToClipboard(id);\n    setCopyText('Copied!');\n  };\n\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <ScheduleSwitch repoAddress={repoAddress} schedule={schedule} />\n          </Box>\n        }\n        tags={\n          <>\n            <Tag icon=\"schedule\">\n              Schedule in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {futureTicks.results.length && running ? (\n              <Tag icon=\"timer\">\n                Next tick:{' '}\n                <TimestampDisplay\n                  timestamp={futureTicks.results[0].timestamp}\n                  timezone={executionTimezone}\n                  timeFormat={TIME_FORMAT}\n                />\n              </Tag>\n            ) : null}\n            <Box flex={{display: 'inline-flex'}} margin={{top: 2}}>\n              <Tooltip content={copyText}>\n                <ButtonLink color={{link: Colors.Gray400, hover: Colors.Gray600}} onClick={copyId}>\n                  <Mono>{`id: ${id.slice(0, 8)}`}</Mono>\n                </ButtonLink>\n              </Tooltip>\n            </Box>\n          </>\n        }\n        right={<QueryRefreshCountdown refreshState={refreshState} />}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {schedule.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{schedule.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <Group direction=\"row\" spacing={8} alignItems=\"center\">\n                  <TimestampDisplay\n                    timestamp={latestTick.timestamp}\n                    timezone={executionTimezone}\n                    timeFormat={TIME_FORMAT}\n                  />\n                  <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n                </Group>\n              ) : (\n                'Schedule has never run'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>{isJob ? 'Job' : 'Pipeline'}</td>\n            <td>\n              <PipelineReference\n                pipelineName={pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={isJob}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>Partition set</td>\n            <td>\n              {partitionSet ? (\n                <SchedulePartitionStatus schedule={schedule} repoAddress={repoAddress} />\n              ) : (\n                'None'\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Schedule</td>\n            <td>\n              {cronSchedule ? (\n                <Group direction=\"row\" spacing={8}>\n                  <span>{humanCronString(cronSchedule, executionTimezone || 'UTC')}</span>\n                  <Code>({cronSchedule})</Code>\n                </Group>\n              ) : (\n                <div>&mdash;</div>\n              )}\n            </td>\n          </tr>\n          {executionTimezone ? (\n            <tr>\n              <td>Execution timezone</td>\n              <td>{executionTimezone}</td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Tabs, Tab, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable} from '../instigation/TickHistory';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {ScheduleDetails} from './ScheduleDetails';\nimport {SCHEDULE_FRAGMENT} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {\n  PreviousRunsForScheduleQuery,\n  PreviousRunsForScheduleQueryVariables,\n} from './types/PreviousRunsForScheduleQuery';\nimport {\n  ScheduleRootQuery,\n  ScheduleRootQueryVariables,\n  ScheduleRootQuery_scheduleOrError_Schedule as Schedule,\n} from './types/ScheduleRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const ScheduleRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const {scheduleName} = useParams<{scheduleName: string}>();\n\n  useDocumentTitle(`Schedule: ${scheduleName}`);\n\n  const scheduleSelector = {\n    ...repoAddressToSelector(repoAddress),\n    scheduleName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n\n  const queryResult = useQuery<ScheduleRootQuery, ScheduleRootQueryVariables>(SCHEDULE_ROOT_QUERY, {\n    variables: {\n      scheduleSelector,\n    },\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({scheduleOrError, instance}) => {\n        if (scheduleOrError.__typename !== 'Schedule') {\n          return null;\n        }\n\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <ScheduleDetails\n              repoAddress={repoAddress}\n              schedule={scheduleOrError}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <Box padding={{vertical: 16, horizontal: 24}}>\n                <SchedulerInfo daemonHealth={instance.daemonHealth} />\n              </Box>\n            ) : null}\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={scheduleOrError.name} />\n            ) : (\n              <SchedulePreviousRuns\n                repoAddress={repoAddress}\n                schedule={scheduleOrError}\n                tabs={tabs}\n              />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nexport const SchedulePreviousRuns: React.FC<{\n  repoAddress: RepoAddress;\n  schedule: Schedule;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({schedule, highlightedIds, tabs}) => {\n  const queryResult = useQuery<PreviousRunsForScheduleQuery, PreviousRunsForScheduleQueryVariables>(\n    PREVIOUS_RUNS_FOR_SCHEDULE_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        limit: 20,\n        filter: {\n          pipelineName: schedule.pipelineName,\n          tags: [{key: DagsterTag.ScheduleName, value: schedule.name}],\n        },\n      },\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  if (!data) {\n    return null;\n  } else if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nconst SCHEDULE_ROOT_QUERY = gql`\n  query ScheduleRootQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        ...ScheduleFragment\n      }\n      ... on ScheduleNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SCHEDULER\") {\n          id\n          healthy\n        }\n      }\n    }\n  }\n\n  ${SCHEDULE_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst PREVIOUS_RUNS_FOR_SCHEDULE_QUERY = gql`\n  query PreviousRunsForScheduleQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on Error {\n        message\n      }\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, NonIdealState, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  PreviousRunsForSensorQuery,\n  PreviousRunsForSensorQueryVariables,\n} from './types/PreviousRunsForSensorQuery';\nimport {SensorFragment} from './types/SensorFragment';\n\nconst RUNS_LIMIT = 20;\n\nexport const SensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n  highlightedIds?: string[];\n}> = ({sensor, highlightedIds, tabs}) => {\n  const {data} = useQuery<PreviousRunsForSensorQuery, PreviousRunsForSensorQueryVariables>(\n    PREVIOUS_RUNS_FOR_SENSOR_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          pipelineName: sensor.targets?.length === 1 ? sensor.targets[0].pipelineName : undefined,\n          tags: [{key: DagsterTag.SensorName, value: sensor.name}],\n        },\n      },\n    },\n  );\n\n  if (!data || data.pipelineRunsOrError.__typename !== 'Runs') {\n    return null;\n  }\n\n  const runs = data?.pipelineRunsOrError.results;\n  return <RunTable actionBarComponents={tabs} runs={runs} highlightedIds={highlightedIds} />;\n};\n\nexport const NoTargetSensorPreviousRuns: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  highlightedIds: string[];\n}> = () => {\n  return (\n    <Group direction=\"column\" spacing={4}>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'bottom', width: 1, color: Colors.Gray100}}\n        flex={{direction: 'row'}}\n      >\n        <Subheading>Latest runs</Subheading>\n      </Box>\n      <div style={{color: Colors.Gray400}}>\n        <Box margin={{vertical: 64}}>\n          <NonIdealState\n            icon=\"sensors\"\n            title=\"No runs to display\"\n            description=\"This sensor does not target a pipeline or job.\"\n          />\n        </Box>\n      </div>\n    </Group>\n  );\n};\n\nconst PREVIOUS_RUNS_FOR_SENSOR_QUERY = gql`\n  query PreviousRunsForSensorQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      __typename\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n    }\n  }\n  ${RUN_TABLE_RUN_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Tab, Tabs, Page, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useParams} from 'react-router-dom';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TicksTable, TickHistoryTimeline} from '../instigation/TickHistory';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {SensorRootQuery, SensorRootQueryVariables} from './types/SensorRootQuery';\n\nexport const SensorRoot: React.FC<{repoAddress: RepoAddress}> = ({repoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [selectedTab, setSelectedTab] = React.useState<string>('ticks');\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const tabs = (\n    <Tabs selectedTabId={selectedTab} onChange={setSelectedTab}>\n      <Tab id=\"ticks\" title=\"Tick history\" />\n      <Tab id=\"runs\" title=\"Run history\" />\n    </Tabs>\n  );\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {({sensorOrError, instance}) => {\n        if (sensorOrError.__typename === 'SensorNotFoundError') {\n          return (\n            <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"error\"\n                title={`Could not find sensor \\`${sensorName}\\` in repository \\`${repoAddress.name}\\``}\n              />\n            </Box>\n          );\n        } else if (sensorOrError.__typename === 'PythonError') {\n          return <PythonErrorInfo error={sensorOrError} />;\n        } else if (sensorOrError.__typename !== 'Sensor') {\n          return null;\n        }\n        const showDaemonWarning = !instance.daemonHealth.daemonStatus.healthy;\n\n        return (\n          <Page>\n            <SensorDetails\n              repoAddress={repoAddress}\n              sensor={sensorOrError}\n              daemonHealth={instance.daemonHealth.daemonStatus.healthy}\n              refreshState={refreshState}\n            />\n            {showDaemonWarning ? (\n              <Box padding={{vertical: 16, horizontal: 24}}>\n                <SensorInfo daemonHealth={instance.daemonHealth} />\n              </Box>\n            ) : null}\n            <TickHistoryTimeline repoAddress={repoAddress} name={sensorOrError.name} />\n            {selectedTab === 'ticks' ? (\n              <TicksTable tabs={tabs} repoAddress={repoAddress} name={sensorOrError.name} />\n            ) : (\n              <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n            )}\n          </Page>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      __typename\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n      daemonHealth {\n        id\n        daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${SENSOR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, PageHeader, Tag, Heading} from '@dagster-io/ui';\nimport React from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {\n  GraphExplorer,\n  GraphExplorerOptions,\n  GRAPH_EXPLORER_FRAGMENT,\n  GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT,\n} from '../pipelines/GraphExplorer';\nimport {explorerPathFromString, explorerPathToString} from '../pipelines/PipelinePathUtils';\nimport {Loading} from '../ui/Loading';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {RepoAddress} from './types';\nimport {\n  GraphExplorerRootQuery,\n  GraphExplorerRootQueryVariables,\n} from './types/GraphExplorerRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const GraphRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const path = explorerPathFromString(params[0]);\n\n  // Show the name of the composite solid we are within (-1 is the selection, -2 is current parent)\n  // or the name of the pipeline tweaked to look a bit more like a graph name.\n  const title = path.opNames.length > 1 ? path.opNames[path.opNames.length - 2] : path.pipelineName;\n  useDocumentTitle(`Graph: ${title}`);\n\n  return (\n    <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      <PageHeader\n        title={<Heading>{title}</Heading>}\n        tags={\n          <Tag icon=\"schema\">\n            Graph in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n      />\n      <Box\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n        style={{minHeight: 0, flex: 1, display: 'flex'}}\n      >\n        <GraphExplorerRoot repoAddress={repoAddress} />\n      </Box>\n    </div>\n  );\n};\n\nconst GraphExplorerRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const params = useParams();\n\n  const explorerPath = explorerPathFromString(params['0']);\n  const history = useHistory();\n  const [options, setOptions] = React.useState<GraphExplorerOptions>({\n    explodeComposites: false,\n    preferAssetRendering: true,\n  });\n\n  const parentNames = explorerPath.opNames.slice(0, explorerPath.opNames.length - 1);\n  const graphResult = useQuery<GraphExplorerRootQuery, GraphExplorerRootQueryVariables>(\n    GRAPH_EXPLORER_ROOT_QUERY,\n    {\n      variables: {\n        graphSelector: {\n          repositoryName: repoAddress?.name || '',\n          repositoryLocationName: repoAddress?.location || '',\n          graphName: explorerPath.pipelineName,\n        },\n        rootHandleID: parentNames.join('.'),\n        requestScopeHandleID: options.explodeComposites ? undefined : parentNames.join('.'),\n      },\n    },\n  );\n\n  return (\n    <Loading<GraphExplorerRootQuery> queryResult={graphResult}>\n      {({graphOrError: result}) => {\n        if (result.__typename === 'GraphNotFoundError') {\n          return (\n            <NonIdealState icon=\"error\" title=\"Graph not found\" description={result.message} />\n          );\n        }\n        if (result.__typename === 'PythonError') {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" description={result.message} />;\n        }\n        const parentHandle = result.solidHandle;\n        const displayedHandles = options.explodeComposites\n          ? explodeCompositesInHandleGraph(result.solidHandles)\n          : result.solidHandles;\n\n        return (\n          <GraphExplorer\n            options={options}\n            setOptions={setOptions}\n            explorerPath={explorerPath}\n            onChangeExplorerPath={(path, mode) => {\n              const fullPath = workspacePathFromAddress(\n                props.repoAddress,\n                `/graphs/${explorerPathToString(path)}`,\n              );\n              if (mode === 'push') {\n                history.push(fullPath);\n              } else {\n                history.replace(fullPath);\n              }\n            }}\n            container={result}\n            repoAddress={repoAddress}\n            handles={displayedHandles}\n            parentHandle={parentHandle ? parentHandle : undefined}\n            isGraph={true}\n            getInvocations={(definitionName) =>\n              displayedHandles\n                .filter((s) => s.solid.definition.name === definitionName)\n                .map((s) => ({handleID: s.handleID}))\n            }\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst GRAPH_EXPLORER_ROOT_QUERY = gql`\n  query GraphExplorerRootQuery(\n    $graphSelector: GraphSelector\n    $rootHandleID: String!\n    $requestScopeHandleID: String\n  ) {\n    graphOrError(selector: $graphSelector) {\n      ... on Graph {\n        id\n        name\n        ...GraphExplorerFragment\n\n        solidHandle(handleID: $rootHandleID) {\n          ...GraphExplorerSolidHandleFragment\n        }\n        solidHandles(parentHandleID: $requestScopeHandleID) {\n          handleID\n          solid {\n            name\n          }\n          ...GraphExplorerSolidHandleFragment\n        }\n      }\n      ... on GraphNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n  ${GRAPH_EXPLORER_FRAGMENT}\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const WorkspaceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/workspace/jobs\" />\n        {/* <TabLink id=\"schedules\" title=\"Schedules\" to=\"/workspace/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/workspace/sensors\" />\n        <TabLink id=\"graphs\" title=\"Graphs\" to=\"/workspace/graphs\" />\n        <TabLink id=\"ops\" title=\"Ops\" to=\"/workspace/ops\" /> */}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Heading,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Spinner,\n  Tag,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {JobItemWithRuns, JobTable, ScheduleFragment} from '../instance/JobTable';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {makeJobKey} from '../runs/QueryfulRunTimeline';\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunTimeFragment';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitchFragment';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\n\nimport {REPOSITORY_INFO_FRAGMENT} from './RepositoryInformation';\nimport {DagsterRepoOption, WorkspaceContext} from './WorkspaceContext';\nimport {WorkspaceTabs} from './WorkspaceTabs';\nimport {buildRepoAddress} from './buildRepoAddress';\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {RecentRunsPerJobQuery} from './types/RecentRunsPerJobQuery';\nimport {WorkspaceJobsQuery} from './types/WorkspaceJobsQuery';\n\nconst JOBS_EXPANSION_STATE_STORAGE_KEY = 'jobs-page-expansion-state';\n\nexport const WorkspaceJobsRoot = () => {\n  useTrackPageView();\n\n  const [searchValue, setSearchValue] = React.useState('');\n  const {expandedKeys, onToggle} = useRepoExpansionState(JOBS_EXPANSION_STATE_STORAGE_KEY);\n\n  const {allRepos, loading} = React.useContext(WorkspaceContext);\n\n  const queryResultOverview = useQuery<WorkspaceJobsQuery>(WORKSPACE_JOBS_QUERY, {\n    fetchPolicy: 'network-only',\n    notifyOnNetworkStatusChange: true,\n  });\n  const {data} = queryResultOverview;\n\n  const queryResultLastRuns = useQuery<RecentRunsPerJobQuery>(RECENT_RUNS_PER_JOB_QUERY, {\n    fetchPolicy: 'network-only',\n    notifyOnNetworkStatusChange: true,\n  });\n  const {data: recentRunsData} = queryResultLastRuns;\n\n  // Batch up the data and bucket by repo.\n  const runsByJob = useRunsByJob(recentRunsData);\n  const schedulesAndSensorsByJob = useSchedulesAndSensorsByJob(data);\n  const repoBuckets = useRepoBuckets(allRepos, runsByJob, schedulesAndSensorsByJob);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                <div>\n                  No jobs matching <strong>{searchValue}</strong> were found in this workspace\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description=\"No jobs were found in this workspace\"\n          />\n        </Box>\n      );\n    }\n\n    return filteredBySearch.map(({repoAddress, jobs}) => {\n      const repoKey = repoAddressAsString(repoAddress);\n      const expanded = anySearch || expandedKeys.includes(repoKey);\n      const jobCount = jobs.length;\n      const tooltipContent = () => {\n        if (anySearch) {\n          return jobCount === 1 ? `1 matching job` : `${jobCount} matching jobs`;\n        }\n        return jobCount === 1 ? '1 job' : `${jobCount} jobs`;\n      };\n\n      return (\n        <div key={repoKey} style={{width: '100%'}}>\n          <RepoSectionHeader\n            repoName={repoAddress.name}\n            repoLocation={repoAddress.location}\n            expanded={expanded}\n            onClick={() => {\n              if (!anySearch) {\n                onToggle(repoAddress);\n              }\n            }}\n            showLocation={false}\n            rightElement={\n              <Tooltip\n                content={<span style={{whiteSpace: 'nowrap'}}>{tooltipContent()}</span>}\n                placement=\"top\"\n              >\n                <Tag intent=\"primary\">{jobCount}</Tag>\n              </Tooltip>\n            }\n          />\n          {expanded ? <JobTable jobs={jobs} /> : null}\n        </div>\n      );\n    });\n  };\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Workspace</Heading>} tabs={<WorkspaceTabs tab=\"jobs\" />} />\n      {loading && !allRepos.length ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <Box\n            padding={{horizontal: 24, top: 16}}\n            flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n          >\n            {allRepos.length > 1 ? <RepoFilterButton /> : null}\n            <TextInput\n              icon=\"search\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              placeholder=\"Filter by job name…\"\n              style={{width: '340px'}}\n            />\n          </Box>\n          <Box padding={{top: 20}}>{content()}</Box>\n        </>\n      )}\n    </Page>\n  );\n};\n\ntype ScheduelesAndSensorsByJob = {\n  [key: string]: {schedules: ScheduleFragment[]; sensors: SensorSwitchFragment[]};\n};\n\nconst useSchedulesAndSensorsByJob = (\n  data: WorkspaceJobsQuery | undefined,\n): ScheduelesAndSensorsByJob => {\n  return React.useMemo(() => {\n    if (!data || data?.workspaceOrError.__typename !== 'Workspace') {\n      return {};\n    }\n\n    const byJobKey = {};\n    data.workspaceOrError.locationEntries.forEach((entry) => {\n      if (entry.locationOrLoadError?.__typename !== 'RepositoryLocation') {\n        return;\n      }\n\n      const location = entry.locationOrLoadError;\n      entry.locationOrLoadError.repositories.forEach((repo) => {\n        const repoAddress = buildRepoAddress(repo.name, location.name);\n        repo.schedules.forEach((schedule) => {\n          const jobKey = makeJobKey(repoAddress, schedule.pipelineName);\n          const dataForJob = {...(byJobKey[jobKey] || {schedules: [], sensors: []})};\n          dataForJob.schedules.push(schedule);\n          byJobKey[jobKey] = dataForJob;\n        });\n        repo.sensors.forEach((sensor) => {\n          (sensor?.targets || []).forEach((target) => {\n            const jobKey = makeJobKey(repoAddress, target.pipelineName);\n            const dataForJob = {...(byJobKey[jobKey] || {schedules: [], sensors: []})};\n            dataForJob.sensors.push(sensor);\n            byJobKey[jobKey] = dataForJob;\n          });\n        });\n      });\n    });\n\n    return byJobKey;\n  }, [data]);\n};\n\ntype RunsByJob = {\n  [jobKey: string]: RunTimeFragment[];\n};\n\nconst useRunsByJob = (recentRunsData: RecentRunsPerJobQuery | undefined): RunsByJob => {\n  return React.useMemo(() => {\n    if (!recentRunsData || recentRunsData?.workspaceOrError.__typename !== 'Workspace') {\n      return {};\n    }\n\n    const byJobKey = {};\n    recentRunsData.workspaceOrError.locationEntries.forEach((entry) => {\n      if (entry.locationOrLoadError?.__typename !== 'RepositoryLocation') {\n        return;\n      }\n      const location = entry.locationOrLoadError;\n      entry.locationOrLoadError.repositories.forEach((repo) => {\n        const repoAddress = buildRepoAddress(repo.name, location.name);\n        repo.pipelines.forEach((job) => {\n          const jobKey = makeJobKey(repoAddress, job.name);\n          byJobKey[jobKey] = job.runs;\n        });\n      });\n    });\n\n    return byJobKey;\n  }, [recentRunsData]);\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: JobItemWithRuns[];\n};\n\nconst useRepoBuckets = (\n  allRepos: DagsterRepoOption[],\n  runsByJob: RunsByJob,\n  schedulesAndSensorsByJob: ScheduelesAndSensorsByJob,\n): RepoBucket[] => {\n  return React.useMemo(() => {\n    return [...allRepos]\n      .sort((a, b) =>\n        a.repository.name.toLocaleLowerCase().localeCompare(b.repository.name.toLocaleLowerCase()),\n      )\n      .map((repo) => {\n        const {name, pipelines} = repo.repository;\n        const repoAddress = buildRepoAddress(name, repo.repositoryLocation.name);\n        return {\n          repoAddress,\n          jobs: pipelines\n            .filter(({name}) => !isHiddenAssetGroupJob(name))\n            .map((pipeline) => {\n              const jobKey = makeJobKey(repoAddress, pipeline.name);\n              const dataForJob = schedulesAndSensorsByJob[jobKey];\n\n              return {\n                isJob: pipeline.isJob,\n                name: pipeline.name,\n                repoAddress,\n                schedules: dataForJob?.schedules || [],\n                sensors: dataForJob?.sensors || [],\n                runs: runsByJob[jobKey] || [],\n              };\n            }),\n        };\n      })\n      .filter((repo) => repo.jobs.length > 0);\n  }, [allRepos, runsByJob, schedulesAndSensorsByJob]);\n};\n\nconst WORKSPACE_JOB_FRAGMENT = gql`\n  fragment WorkspaceJobFragment on Pipeline {\n    id\n    name\n    isJob\n    modes {\n      id\n      name\n    }\n  }\n`;\n\nexport const WORKSPACE_JOBS_QUERY = gql`\n  query WorkspaceJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  ...WorkspaceJobFragment\n                }\n                ...RepositoryInfoFragment\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                  ...ScheduleSwitchFragment\n                }\n                sensors {\n                  id\n                  name\n                  targets {\n                    pipelineName\n                  }\n                  sensorState {\n                    id\n                    status\n                  }\n                  ...SensorSwitchFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${WORKSPACE_JOB_FRAGMENT}\n  ${REPOSITORY_INFO_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nexport const RECENT_RUNS_PER_JOB_QUERY = gql`\n  query RecentRunsPerJobQuery {\n    workspaceOrError {\n      ... on Workspace {\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                  runs(limit: 5) {\n                    id\n                    ...RunTimeFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n`;\n","import {\n  Box,\n  Colors,\n  Group,\n  NonIdealState,\n  Page,\n  PageHeader,\n  Table,\n  Heading,\n  Subheading,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, Redirect} from 'react-router-dom';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {useTrackPageView} from '../app/analytics';\nimport {LoadingSpinner} from '../ui/Loading';\n\nimport {ReloadAllButton} from './ReloadAllButton';\nimport {RepositoryLocationsList} from './RepositoryLocationsList';\nimport {useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPath} from './buildRepoAddress';\nimport {workspacePath} from './workspacePath';\n\nexport const WorkspaceOverviewRoot = () => {\n  useTrackPageView();\n\n  const {flagNewWorkspace} = useFeatureFlags();\n  const {loading, error, options} = useRepositoryOptions();\n\n  if (flagNewWorkspace) {\n    return <Redirect to=\"/workspace/jobs\" />;\n  }\n\n  const content = () => {\n    if (loading) {\n      return <LoadingSpinner purpose=\"page\" />;\n    }\n\n    if (error) {\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"error\"\n            title=\"Error loading repositories\"\n            description=\"Could not load repositories in this workspace.\"\n          />\n        </Box>\n      );\n    }\n\n    if (!options.length) {\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"folder\"\n            title=\"No repositories\"\n            description=\"When you add a repository to this workspace, it will appear here.\"\n          />\n        </Box>\n      );\n    }\n\n    const anyPipelinesInWorkspace = options.some((option) =>\n      option.repository.pipelines.some((p) => !p.isJob),\n    );\n\n    return (\n      <Table>\n        <thead>\n          <tr>\n            <th>Repository</th>\n            <th>Assets</th>\n            <th>Jobs</th>\n            {anyPipelinesInWorkspace ? <th>Pipelines</th> : null}\n            <th>Graphs</th>\n            <th>Ops</th>\n            <th>Schedules</th>\n            <th>Sensors</th>\n          </tr>\n        </thead>\n        <tbody>\n          {options.map((repository) => {\n            const {\n              repository: {name, pipelines},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPath(name, location);\n            const anyPipelines = pipelines.some((pipelineOrJob) => !pipelineOrJob.isJob);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                <td>\n                  <Link to={workspacePath(name, location, '/assets')}>Assets</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/jobs')}>Jobs</Link>\n                </td>\n                {anyPipelinesInWorkspace ? (\n                  <td>\n                    {anyPipelines ? (\n                      <Link to={workspacePath(name, location, '/pipelines')}>Pipelines</Link>\n                    ) : (\n                      <span style={{color: Colors.Gray400}}>None</span>\n                    )}\n                  </td>\n                ) : null}\n                <td>\n                  <Link to={workspacePath(name, location, '/graphs')}>Graphs</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/ops')}>Ops</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/schedules')}>Schedules</Link>\n                </td>\n                <td>\n                  <Link to={workspacePath(name, location, '/sensors')}>Sensors</Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    );\n  };\n\n  return (\n    <Page>\n      <PageHeader title={<Heading>Workspace</Heading>} />\n      {flagNewWorkspace ? null : (\n        <>\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Group direction=\"row\" spacing={12} alignItems=\"center\">\n              <Subheading id=\"repository-locations\">Locations</Subheading>\n              <ReloadAllButton />\n            </Group>\n          </Box>\n          <Box padding={{bottom: 24}}>\n            <RepositoryLocationsList />\n          </Box>\n        </>\n      )}\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n      >\n        <Subheading id=\"repository-locations\">Repositories</Subheading>\n      </Box>\n      {content()}\n    </Page>\n  );\n};\n","import {Alert, Box, NonIdealState, Page, PageHeader, Table, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, Redirect, useLocation, useParams, useRouteMatch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {explorerPathFromString} from '../pipelines/PipelinePathUtils';\nimport {LoadingSpinner} from '../ui/Loading';\n\nimport {isThisThingAJob, optionToRepoAddress, useRepositoryOptions} from './WorkspaceContext';\nimport {buildRepoPath} from './buildRepoAddress';\nimport {findRepoContainingPipeline} from './findRepoContainingPipeline';\nimport {workspacePath, workspacePathFromAddress} from './workspacePath';\n\nexport const WorkspacePipelineRoot = () => {\n  useTrackPageView();\n\n  const params = useParams<{pipelinePath: string}>();\n  const {pipelinePath} = params;\n\n  const entireMatch = useRouteMatch(['/workspace/pipelines/(/?.*)', '/workspace/jobs/(/?.*)']);\n  const location = useLocation();\n\n  const toAppend = entireMatch!.params[0];\n  const {search} = location;\n\n  const {pipelineName} = explorerPathFromString(pipelinePath);\n  const {loading, options} = useRepositoryOptions();\n\n  if (loading) {\n    return <LoadingSpinner purpose=\"page\" />;\n  }\n\n  const reposWithMatch = findRepoContainingPipeline(options, pipelineName);\n  if (reposWithMatch.length === 0) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"no-results\"\n          title=\"No matching jobs\"\n          description={\n            <div>\n              <div>\n                <strong>{pipelineName}</strong>\n              </div>\n              was not found in any repositories in this workspace.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  if (reposWithMatch.length === 1) {\n    const match = reposWithMatch[0];\n    const repoAddress = optionToRepoAddress(match);\n    const isJob = isThisThingAJob(match, pipelineName);\n    const to = workspacePathFromAddress(\n      repoAddress,\n      `/${isJob ? 'jobs' : 'pipelines'}/${toAppend}${search}`,\n    );\n    return <Redirect to={to} />;\n  }\n\n  const anyPipelines = reposWithMatch.some((repo) => !isThisThingAJob(repo, pipelineName));\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pipelineName}</Heading>}\n        icon=\"job\"\n        description={\n          anyPipelines ? 'Job / pipeline in multiple repositories' : 'Job in multiple repositories'\n        }\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Alert\n          intent=\"info\"\n          title={\n            <div>\n              {anyPipelines ? (\n                <>\n                  Jobs or pipelines named <strong>{pipelineName}</strong> were found in multiple\n                  repositories.\n                </>\n              ) : (\n                <>\n                  Jobs named <strong>{pipelineName}</strong> were found in multiple repositories.\n                </>\n              )}\n            </div>\n          }\n        />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th>Repository name and location</th>\n            <th>{anyPipelines ? 'Job / Pipeline' : 'Job'}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {reposWithMatch.map((repository) => {\n            const {\n              repository: {name},\n              repositoryLocation: {name: location},\n            } = repository;\n            const repoString = buildRepoPath(name, location);\n            return (\n              <tr key={repoString}>\n                <td style={{width: '40%'}}>{repoString}</td>\n                <td>\n                  <Link\n                    to={workspacePath(\n                      name,\n                      location,\n                      `/${\n                        isThisThingAJob(repository, pipelineName) ? 'jobs' : 'pipelines'\n                      }/${pipelineName}`,\n                    )}\n                  >\n                    {pipelineName}\n                  </Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Page>\n  );\n};\n","import {gql} from '@apollo/client';\nimport {Box} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {OpNode, OP_NODE_DEFINITION_FRAGMENT} from '../graph/OpNode';\nimport {layoutOp} from '../graph/asyncGraphLayout';\n\nimport {OpCardSolidDefinitionFragment} from './types/OpCardSolidDefinitionFragment';\n\ninterface OpCardProps {\n  definition: OpCardSolidDefinitionFragment;\n}\n\nexport const OpCard: React.FC<OpCardProps> = (props) => {\n  const {name, inputDefinitions, outputDefinitions} = props.definition;\n  const layout = layoutOp(\n    {\n      name,\n      inputs: inputDefinitions.map((d) => ({\n        definition: d,\n        dependsOn: [],\n      })),\n      outputs: outputDefinitions.map((d) => ({\n        definition: d,\n        dependedBy: [],\n      })),\n      definition: {\n        description: null,\n        assetNodes: [],\n      },\n    },\n    {x: 0, y: 0},\n  );\n\n  return (\n    <Box padding={24}>\n      <OpCardContainer style={{height: layout.bounds.height}}>\n        <OpNode\n          invocation={undefined}\n          definition={props.definition}\n          minified={false}\n          onClick={() => {}}\n          onDoubleClick={() => {}}\n          onEnterComposite={() => {}}\n          onHighlightEdges={() => {}}\n          layout={layout}\n          selected={false}\n          focused={false}\n          highlightedEdges={[]}\n          dim={false}\n        />\n      </OpCardContainer>\n    </Box>\n  );\n};\n\nexport const OP_CARD_SOLID_DEFINITION_FRAGMENT = gql`\n  fragment OpCardSolidDefinitionFragment on ISolidDefinition {\n    ...OpNodeDefinitionFragment\n    __typename\n    name\n    description\n    metadata {\n      key\n      value\n    }\n    inputDefinitions {\n      name\n    }\n    outputDefinitions {\n      name\n    }\n  }\n\n  ${OP_NODE_DEFINITION_FRAGMENT}\n`;\n\nconst OpCardContainer = styled.div`\n  flex: 1;\n  max-width: 450px;\n  position: relative;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {\n  SidebarOpDefinition,\n  SIDEBAR_OP_DEFINITION_FRAGMENT,\n} from '../pipelines/SidebarOpDefinition';\nimport {SidebarOpInvocationInfo} from '../pipelines/SidebarOpHelpers';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OpCard, OP_CARD_SOLID_DEFINITION_FRAGMENT} from './OpCard';\nimport {UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables} from './types/UsedSolidDetailsQuery';\n\ninterface UsedSolidDetailsProps {\n  name: string;\n  onClickInvocation: (arg: SidebarOpInvocationInfo) => void;\n  repoAddress: RepoAddress;\n}\n\nexport const UsedSolidDetails: React.FC<UsedSolidDetailsProps> = (props) => {\n  const {name, onClickInvocation, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<UsedSolidDetailsQuery, UsedSolidDetailsQueryVariables>(\n    USED_SOLID_DETAILS_QUERY,\n    {\n      variables: {\n        name,\n        repositorySelector,\n      },\n    },\n  );\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({repositoryOrError}) => {\n        if (!(repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolid)) {\n          return null;\n        }\n        const usedSolid = repositoryOrError.usedSolid;\n        return (\n          <>\n            <OpCard definition={usedSolid.definition} />\n            <SidebarOpDefinition\n              definition={usedSolid.definition}\n              showingSubgraph={false}\n              onClickInvocation={onClickInvocation}\n              getInvocations={() => {\n                return usedSolid.invocations.map((i) => ({\n                  handleID: i.solidHandle.handleID,\n                  pipelineName: i.pipeline.name,\n                }));\n              }}\n            />\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst USED_SOLID_DETAILS_QUERY = gql`\n  query UsedSolidDetailsQuery($name: String!, $repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolid(name: $name) {\n          __typename\n          definition {\n            ...OpCardSolidDefinitionFragment\n            ...SidebarOpDefinitionFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${OP_CARD_SOLID_DEFINITION_FRAGMENT}\n  ${SIDEBAR_OP_DEFINITION_FRAGMENT}\n`;\n\nexport const OpDetailScrollContainer = styled.div`\n  overflow: scroll;\n  flex: 1;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  NonIdealState,\n  SplitPanelContainer,\n  SuggestionProvider,\n  TokenizingField,\n  TokenizingFieldValue,\n  stringFromValue,\n  tokenizedValuesFromString,\n  FontFamily,\n} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\nimport {AutoSizer, CellMeasurer, CellMeasurerCache, List} from 'react-virtualized';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {OpDetailScrollContainer, UsedSolidDetails} from './OpDetailsRoot';\nimport {OpTypeSignature, OP_TYPE_SIGNATURE_FRAGMENT} from './OpTypeSignature';\nimport {\n  OpsRootQuery,\n  OpsRootQueryVariables,\n  OpsRootQuery_repositoryOrError_Repository_usedSolids,\n} from './types/OpsRootQuery';\n\nfunction flatUniq(arrs: string[][]) {\n  const results: {[key: string]: boolean} = {};\n  for (const arr of arrs) {\n    for (const item of arr) {\n      results[item] = true;\n    }\n  }\n  return Object.keys(results).sort((a, b) => a.localeCompare(b));\n}\n\ntype Solid = OpsRootQuery_repositoryOrError_Repository_usedSolids;\n\nfunction searchSuggestionsForOps(solids: Solid[]): SuggestionProvider[] {\n  return [\n    {\n      token: 'name',\n      values: () => solids.map((s) => s.definition.name),\n    },\n    {\n      token: 'job',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => !i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'pipeline',\n      values: () =>\n        flatUniq(\n          solids.map((s) =>\n            s.invocations.filter((i) => i.pipeline.isJob).map((i) => i.pipeline.name),\n          ),\n        ),\n    },\n    {\n      token: 'input',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.inputDefinitions.map((d) => d.type.displayName))),\n    },\n    {\n      token: 'output',\n      values: () =>\n        flatUniq(solids.map((s) => s.definition.outputDefinitions.map((d) => d.type.displayName))),\n    },\n  ];\n}\n\nfunction filterSolidsWithSearch(solids: Solid[], search: TokenizingFieldValue[]) {\n  return solids.filter((s) => {\n    for (const item of search) {\n      if (\n        (item.token === 'name' || item.token === undefined) &&\n        !s.definition.name.startsWith(item.value)\n      ) {\n        return false;\n      }\n      if (\n        (item.token === 'pipeline' || item.token === 'job') &&\n        !s.invocations.some((i) => i.pipeline.name === item.value)\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'input' &&\n        !s.definition.inputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n      if (\n        item.token === 'output' &&\n        !s.definition.outputDefinitions.some((i) => i.type.displayName.startsWith(item.value))\n      ) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const OpsRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n  useDocumentTitle('Ops');\n\n  const {name} = useParams<{name?: string}>();\n  const {repoAddress} = props;\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<OpsRootQuery, OpsRootQueryVariables>(OPS_ROOT_QUERY, {\n    variables: {repositorySelector},\n  });\n\n  return (\n    <div style={{height: '100%'}}>\n      <Loading queryResult={queryResult}>\n        {({repositoryOrError}) => {\n          if (repositoryOrError?.__typename === 'Repository' && repositoryOrError.usedSolids) {\n            return (\n              <OpsRootWithData\n                {...props}\n                name={name}\n                repoAddress={repoAddress}\n                usedSolids={repositoryOrError.usedSolids}\n              />\n            );\n          }\n          return null;\n        }}\n      </Loading>\n    </div>\n  );\n};\n\nconst OpsRootWithData: React.FC<Props & {name?: string; usedSolids: Solid[]}> = (props) => {\n  const {name, repoAddress, usedSolids} = props;\n  const history = useHistory();\n  const location = useLocation();\n\n  const {q, typeExplorer} = qs.parse(location.search, {ignoreQueryPrefix: true});\n  const suggestions = searchSuggestionsForOps(usedSolids);\n  const search = tokenizedValuesFromString((q as string) || '', suggestions);\n  const filtered = filterSolidsWithSearch(usedSolids, search);\n\n  const selected = usedSolids.find((s) => s.definition.name === name);\n\n  const onSearch = (search: TokenizingFieldValue[]) => {\n    history.replace({\n      search: `?${qs.stringify({q: stringFromValue(search)})}`,\n    });\n  };\n\n  const onClickOp = (defName: string) => {\n    history.replace(workspacePathFromAddress(repoAddress, `/ops/${defName}?${qs.stringify({q})}`));\n  };\n\n  React.useEffect(() => {\n    // If the user has typed in a search that brings us to a single result, autoselect it\n    if (filtered.length === 1 && (!selected || filtered[0] !== selected)) {\n      onClickOp(filtered[0].definition.name);\n    }\n\n    // If the user has clicked a type, translate it into a search\n    if (typeof typeExplorer === 'string') {\n      onSearch([...search, {token: 'input', value: typeExplorer}]);\n    }\n  });\n\n  const onClickInvocation = React.useCallback(\n    ({pipelineName, handleID}) => {\n      history.push(\n        workspacePathFromAddress(\n          repoAddress,\n          `/pipeline_or_job/${pipelineName}/${handleID.split('.').join('/')}`,\n        ),\n      );\n    },\n    [history, repoAddress],\n  );\n\n  return (\n    <div style={{height: '100%', display: 'flex'}}>\n      <SplitPanelContainer\n        identifier=\"ops\"\n        firstInitialPercent={40}\n        firstMinSize={420}\n        first={\n          <OpListColumnContainer>\n            <Box\n              padding={{vertical: 12, horizontal: 24}}\n              border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n            >\n              <TokenizingField\n                values={search}\n                onChange={(search) => onSearch(search)}\n                suggestionProviders={suggestions}\n                placeholder=\"Filter by name or input/output type...\"\n              />\n            </Box>\n            <div style={{flex: 1}}>\n              <AutoSizer nonce={window.__webpack_nonce__}>\n                {({height, width}) => (\n                  <OpList\n                    height={height}\n                    width={width}\n                    selected={selected}\n                    onClickOp={onClickOp}\n                    items={filtered.sort((a, b) =>\n                      a.definition.name.localeCompare(b.definition.name),\n                    )}\n                  />\n                )}\n              </AutoSizer>\n            </div>\n          </OpListColumnContainer>\n        }\n        second={\n          selected ? (\n            <OpDetailScrollContainer>\n              <UsedSolidDetails\n                name={selected.definition.name}\n                onClickInvocation={onClickInvocation}\n                repoAddress={repoAddress}\n              />\n            </OpDetailScrollContainer>\n          ) : (\n            <Box padding={{vertical: 64}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"No op selected\"\n                description=\"Select an op to see its definition and invocations\"\n              />\n            </Box>\n          )\n        }\n      />\n    </div>\n  );\n};\n\ninterface OpListProps {\n  items: Solid[];\n  width: number;\n  height: number;\n  selected: Solid | undefined;\n  onClickOp: (name: string) => void;\n}\n\nconst OpList: React.FC<OpListProps> = (props) => {\n  const {items, selected} = props;\n  const cache = React.useRef(new CellMeasurerCache({defaultHeight: 60, fixedWidth: true}));\n\n  // Reset our cell sizes when the panel's width is changed. This is similar to a useEffect\n  // but we need it to run /before/ the render not just after it completes.\n  const lastWidth = React.useRef(props.width);\n  if (props.width !== lastWidth.current) {\n    cache.current.clearAll();\n    lastWidth.current = props.width;\n  }\n\n  const selectedIndex = selected ? items.findIndex((item) => item === selected) : undefined;\n\n  return (\n    <Container>\n      <List\n        width={props.width}\n        height={props.height}\n        rowCount={props.items.length}\n        rowHeight={cache.current.rowHeight}\n        scrollToIndex={selectedIndex}\n        className=\"solids-list\"\n        rowRenderer={({parent, index, key, style}) => {\n          const solid = props.items[index];\n          return (\n            <CellMeasurer cache={cache.current} index={index} parent={parent} key={key}>\n              <OpListItem\n                style={style}\n                selected={solid === props.selected}\n                onClick={() => props.onClickOp(solid.definition.name)}\n              >\n                <OpName>{solid.definition.name}</OpName>\n                <OpTypeSignature definition={solid.definition} />\n              </OpListItem>\n            </CellMeasurer>\n          );\n        }}\n        overscanRowCount={10}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  .solids-list:focus {\n    outline: none;\n  }\n`;\n\nconst OPS_ROOT_QUERY = gql`\n  query OpsRootQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      ... on Repository {\n        id\n        usedSolids {\n          __typename\n          definition {\n            name\n            ...OpTypeSignatureFragment\n          }\n          invocations {\n            __typename\n            pipeline {\n              id\n              isJob\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n  ${OP_TYPE_SIGNATURE_FRAGMENT}\n`;\n\nconst OpListItem = styled.div<{selected: boolean}>`\n  background: ${({selected}) => (selected ? Colors.Gray100 : Colors.White)};\n  box-shadow: ${({selected}) => (selected ? Colors.HighlightGreen : 'transparent')} 4px 0 0 inset,\n    ${Colors.KeylineGray} 0 -1px 0 inset;\n  color: ${Colors.Gray800};\n  cursor: pointer;\n  font-size: 14px;\n  display: flex;\n  flex-direction: column;\n  padding: 12px 24px;\n  user-select: none;\n\n  & > code.bp3-code {\n    color: ${Colors.Gray800};\n    background: transparent;\n    font-family: ${FontFamily.monospace};\n    padding: 5px 0 0 0;\n  }\n`;\n\nconst OpName = styled.div`\n  flex: 1;\n  font-weight: 600;\n`;\n\nconst OpListColumnContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n","import {useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Subheading} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {InstigationType} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SCHEDULES_ROOT_QUERY} from './ScheduleUtils';\nimport {SchedulerInfo} from './SchedulerInfo';\nimport {SchedulesNextTicks} from './SchedulesNextTicks';\nimport {SchedulesTable} from './SchedulesTable';\nimport {SchedulesRootQuery, SchedulesRootQueryVariables} from './types/SchedulesRootQuery';\n\nexport const SchedulesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n  useDocumentTitle('Schedules');\n\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SchedulesRootQuery, SchedulesRootQueryVariables>(\n    SCHEDULES_ROOT_QUERY,\n    {\n      variables: {\n        repositorySelector,\n        instigationType: InstigationType.SCHEDULE,\n      },\n      fetchPolicy: 'cache-and-network',\n      partialRefetch: true,\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  useQueryRefreshAtInterval(queryResult, 50 * 1000);\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {(result) => {\n        const {repositoryOrError, unloadableInstigationStatesOrError, instance} = result;\n        let schedulesSection = null;\n\n        if (repositoryOrError.__typename === 'PythonError') {\n          schedulesSection = <PythonErrorInfo error={repositoryOrError} />;\n        } else if (repositoryOrError.__typename === 'RepositoryNotFoundError') {\n          schedulesSection = (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Repository not found\"\n              description=\"Could not load this repository.\"\n            />\n          );\n        } else if (!repositoryOrError.schedules.length) {\n          schedulesSection = (\n            <NonIdealState\n              icon=\"schedule\"\n              title=\"No schedules found\"\n              description={\n                <p>\n                  This repository does not have any schedules defined. Visit the{' '}\n                  <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules\">\n                    scheduler documentation\n                  </a>{' '}\n                  for more information about scheduling runs in Dagster.\n                </p>\n              }\n            />\n          );\n        } else {\n          schedulesSection = repositoryOrError.schedules.length > 0 && (\n            <>\n              <SchedulesTable schedules={repositoryOrError.schedules} repoAddress={repoAddress} />\n              <Box\n                padding={{vertical: 16, horizontal: 24}}\n                border={{side: 'bottom', width: 1, color: Colors.Gray100}}\n              >\n                <Subheading>Scheduled ticks</Subheading>\n              </Box>\n              <SchedulesNextTicks repos={[repositoryOrError]} />\n            </>\n          );\n        }\n\n        return (\n          <>\n            <Box padding={{horizontal: 24, vertical: 16}}>\n              <SchedulerInfo daemonHealth={instance.daemonHealth} />\n            </Box>\n            {schedulesSection}\n            {unloadableInstigationStatesOrError.__typename === 'PythonError' ? (\n              <PythonErrorInfo error={unloadableInstigationStatesOrError} />\n            ) : (\n              <UnloadableSchedules scheduleStates={unloadableInstigationStatesOrError.results} />\n            )}\n          </>\n        );\n      }}\n    </Loading>\n  );\n};\n","import {useQuery, gql} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {PythonErrorInfo, PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {InstigationType} from '../types/globalTypes';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorsTable} from './SensorsTable';\nimport {SensorsRootQuery, SensorsRootQueryVariables} from './types/SensorsRootQuery';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const SensorsRoot = (props: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Sensors');\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const queryResult = useQuery<SensorsRootQuery, SensorsRootQueryVariables>(SENSORS_ROOT_QUERY, {\n    variables: {\n      repositorySelector,\n      instigationType: InstigationType.SENSOR,\n    },\n    fetchPolicy: 'cache-and-network',\n    partialRefetch: true,\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(queryResult, 50 * 1000);\n\n  return (\n    <Loading queryResult={queryResult} allowStaleData={true}>\n      {(result) => {\n        const {sensorsOrError, unloadableInstigationStatesOrError, instance} = result;\n        const content = () => {\n          if (sensorsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={sensorsOrError} />;\n          } else if (unloadableInstigationStatesOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={unloadableInstigationStatesOrError} />;\n          } else if (sensorsOrError.__typename === 'RepositoryNotFoundError') {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"error\"\n                  title=\"Repository not found\"\n                  description=\"Could not load this repository.\"\n                />\n              </Box>\n            );\n          } else if (!sensorsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"sensors\"\n                  title=\"No Sensors Found\"\n                  description={\n                    <p>\n                      This repository does not have any sensors defined. Visit the{' '}\n                      <a\n                        href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        sensors documentation\n                      </a>{' '}\n                      for more information about creating sensors in Dagster.\n                    </p>\n                  }\n                />\n              </Box>\n            );\n          } else {\n            return (\n              <>\n                {sensorsOrError.results.length > 0 && (\n                  <Box padding={{horizontal: 24, vertical: 16}}>\n                    <SensorInfo daemonHealth={instance.daemonHealth} />\n                  </Box>\n                )}\n                <SensorsTable repoAddress={repoAddress} sensors={sensorsOrError.results} />\n                <UnloadableSensors sensorStates={unloadableInstigationStatesOrError.results} />\n              </>\n            );\n          }\n        };\n\n        return <div>{content()}</div>;\n      }}\n    </Loading>\n  );\n};\n\nconst SENSORS_ROOT_QUERY = gql`\n  query SensorsRootQuery(\n    $repositorySelector: RepositorySelector!\n    $instigationType: InstigationType!\n  ) {\n    sensorsOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ...PythonErrorFragment\n      ... on Sensors {\n        results {\n          id\n          ...SensorFragment\n        }\n      }\n    }\n    unloadableInstigationStatesOrError(instigationType: $instigationType) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      ...InstanceHealthFragment\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${SENSOR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {RepositoryLink} from '../nav/RepositoryLink';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryAssetsListQuery,\n  RepositoryAssetsListQueryVariables,\n} from './types/RepositoryAssetsListQuery';\n\nconst REPOSITORY_ASSETS_LIST_QUERY = gql`\n  query RepositoryAssetsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        assetNodes {\n          id\n          assetKey {\n            path\n          }\n          opNames\n          description\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryAssetsList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryAssetsListQuery,\n    RepositoryAssetsListQueryVariables\n  >(REPOSITORY_ASSETS_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const assetsForTable = React.useMemo(\n    () =>\n      (repo?.__typename === 'Repository' ? [...repo.assetNodes] : []).sort((a, b) =>\n        displayNameForAssetKey(a.assetKey).localeCompare(displayNameForAssetKey(b.assetKey)),\n      ),\n    [repo],\n  );\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !assetsForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load graphs\"\n          description={`Could not load graphs for ${repoAddressAsString(repoAddress)}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!assetsForTable.length) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"No assets found\"\n          description={`No @asset definitions for ${repoAddressAsString(repoAddress)}`}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Asset Key</th>\n          <th>Defined In</th>\n        </tr>\n      </thead>\n      <tbody>\n        {assetsForTable.map((asset) => (\n          <tr key={asset.id}>\n            <td>\n              <Box flex={{direction: 'column', gap: 4}}>\n                <Link to={assetDetailsPathForKey(asset.assetKey)}>\n                  {displayNameForAssetKey(asset.assetKey)}\n                </Link>\n                <Description>{asset.description}</Description>\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'column'}}>\n                <RepositoryLink\n                  repoAddress={{\n                    name: asset.repository.name,\n                    location: asset.repository.location.name,\n                  }}\n                />\n              </Box>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, Group, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryGraphsListQuery,\n  RepositoryGraphsListQueryVariables,\n} from './types/RepositoryGraphsListQuery';\nimport {workspacePath} from './workspacePath';\n\nconst REPOSITORY_GRAPHS_LIST_QUERY = gql`\n  query RepositoryGraphsListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        usedSolids {\n          definition {\n            __typename\n            ... on CompositeSolidDefinition {\n              id\n              name\n              description\n            }\n          }\n          invocations {\n            pipeline {\n              id\n              name\n            }\n            solidHandle {\n              handleID\n            }\n          }\n        }\n        pipelines {\n          id\n          description\n          name\n          isJob\n          graphName\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\ninterface Item {\n  name: string;\n  description: string | null;\n  path: string;\n  repoAddress: RepoAddress;\n}\n\nexport const RepositoryGraphsList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryGraphsListQuery,\n    RepositoryGraphsListQueryVariables\n  >(REPOSITORY_GRAPHS_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const graphsForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    const jobGraphNames = new Set<string>(\n      repo.pipelines\n        .filter((p) => p.isJob && !isHiddenAssetGroupJob(p.name))\n        .map((p) => p.graphName),\n    );\n    const items: Item[] = Array.from(jobGraphNames).map((graphName) => ({\n      name: graphName,\n      path: `/graphs/${graphName}`,\n      description: null,\n      repoAddress,\n    }));\n\n    repo.usedSolids.forEach((s) => {\n      if (s.definition.__typename === 'CompositeSolidDefinition') {\n        items.push({\n          name: s.definition.name,\n          path: `/graphs/${s.invocations[0].pipeline.name}/${s.invocations[0].solidHandle.handleID}/`,\n          description: s.definition.description,\n          repoAddress,\n        });\n      }\n    });\n\n    return items.sort((a, b) => a.name.localeCompare(b.name));\n  }, [repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !graphsForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load graphs\"\n          description={`Could not load graphs for ${repoAddressAsString(repoAddress)}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!graphsForTable.length) {\n    return (\n      <Box padding={64}>\n        <NonIdealState\n          icon=\"schema\"\n          title=\"No graphs found\"\n          description={<div>This repository does not have any graphs defined.</div>}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Graph</th>\n        </tr>\n      </thead>\n      <tbody>\n        {graphsForTable.map(({name, description, path, repoAddress}) => (\n          <tr key={`${name}-${repoAddressAsString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <Link to={workspacePath(repoAddress.name, repoAddress.location, path)}>{name}</Link>\n                <Description>{description}</Description>\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Table, Caption} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatusWithStats} from '../runs/RunStatusDots';\nimport {repoAddressAsString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {PipelineReference} from './PipelineReference';\nimport {PipelineTableFragment} from './types/PipelineTableFragment';\n\ntype PipelineForTable = {\n  pipelineOrJob: PipelineTableFragment;\n  repoAddress: RepoAddress;\n};\n\ninterface Props {\n  pipelinesOrJobs: PipelineForTable[];\n  showRepo: boolean;\n}\n\nexport const PipelineTable: React.FC<Props> = (props) => {\n  const {pipelinesOrJobs, showRepo} = props;\n\n  const anyPipelines = pipelinesOrJobs.some(({pipelineOrJob}) => !pipelineOrJob.isJob);\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th style={{width: '50%', minWidth: '400px'}}>\n            {anyPipelines ? 'Job or Pipeline' : 'Job'}\n          </th>\n          <th>Schedules</th>\n          <th>Sensors</th>\n          <th style={{whiteSpace: 'nowrap'}}>Recent runs</th>\n        </tr>\n      </thead>\n      <tbody>\n        {pipelinesOrJobs.map(({pipelineOrJob, repoAddress}) => (\n          <tr key={`${pipelineOrJob.name}-${repoAddressAsString(repoAddress)}`}>\n            <td>\n              <Group direction=\"column\" spacing={4}>\n                <PipelineReference\n                  isJob={pipelineOrJob.isJob}\n                  pipelineName={pipelineOrJob.name}\n                  pipelineHrefContext={repoAddress}\n                  truncationThreshold={80}\n                />\n                {showRepo ? <Caption>{repoAddressAsString(repoAddress)}</Caption> : null}\n                <Description>{pipelineOrJob.description}</Description>\n              </Group>\n            </td>\n            <td>\n              {pipelineOrJob.schedules?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipelineOrJob.schedules.map((schedule) => (\n                    <Link\n                      key={schedule.name}\n                      to={workspacePathFromAddress(repoAddress, `/schedules/${schedule.name}`)}\n                    >\n                      {schedule.name}\n                    </Link>\n                  ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.Gray200}}>None</div>\n              )}\n            </td>\n            <td>\n              {pipelineOrJob.sensors?.length ? (\n                <Group direction=\"column\" spacing={2}>\n                  {pipelineOrJob.sensors.map((sensor) => (\n                    <Link\n                      key={sensor.name}\n                      to={workspacePathFromAddress(repoAddress, `/sensors/${sensor.name}`)}\n                    >\n                      {sensor.name}\n                    </Link>\n                  ))}\n                </Group>\n              ) : (\n                <div style={{color: Colors.Gray200}}>None</div>\n              )}\n            </td>\n            <td>\n              <Group direction=\"row\" spacing={4} alignItems=\"center\">\n                {pipelineOrJob.runs.map((run) => (\n                  <RunStatusWithStats\n                    key={run.id}\n                    runId={run.runId}\n                    status={run.status}\n                    size={12}\n                  />\n                ))}\n              </Group>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nconst Description = styled.div`\n  color: ${Colors.Gray400};\n  font-size: 12px;\n`;\n\nexport const PIPELINE_TABLE_FRAGMENT = gql`\n  fragment PipelineTableFragment on Pipeline {\n    id\n    description\n    isJob\n    name\n    modes {\n      id\n      name\n    }\n    runs(limit: 5) {\n      id\n      mode\n      runId\n      status\n    }\n    schedules {\n      id\n      name\n      mode\n    }\n    sensors {\n      id\n      name\n      targets {\n        mode\n        pipelineName\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {PipelineTable, PIPELINE_TABLE_FRAGMENT} from '../pipelines/PipelineTable';\n\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {repoAddressToSelector} from './repoAddressToSelector';\nimport {RepoAddress} from './types';\nimport {\n  RepositoryPipelinesListQuery,\n  RepositoryPipelinesListQueryVariables,\n} from './types/RepositoryPipelinesListQuery';\n\nconst REPOSITORY_PIPELINES_LIST_QUERY = gql`\n  query RepositoryPipelinesListQuery($repositorySelector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $repositorySelector) {\n      __typename\n      ... on Repository {\n        id\n        pipelines {\n          id\n          ...PipelineTableFragment\n        }\n      }\n      ... on RepositoryNotFoundError {\n        message\n      }\n    }\n  }\n  ${PIPELINE_TABLE_FRAGMENT}\n`;\n\ninterface Props {\n  repoAddress: RepoAddress;\n  display: 'jobs' | 'pipelines';\n}\n\nexport const RepositoryPipelinesList: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {display, repoAddress} = props;\n  const repositorySelector = repoAddressToSelector(repoAddress);\n\n  const {data, error, loading} = useQuery<\n    RepositoryPipelinesListQuery,\n    RepositoryPipelinesListQueryVariables\n  >(REPOSITORY_PIPELINES_LIST_QUERY, {\n    fetchPolicy: 'cache-and-network',\n    variables: {repositorySelector},\n  });\n\n  const repo = data?.repositoryOrError;\n  const pipelinesForTable = React.useMemo(() => {\n    if (!repo || repo.__typename !== 'Repository') {\n      return null;\n    }\n    return repo.pipelines\n      .filter((pipelineOrJob) => !isHiddenAssetGroupJob(pipelineOrJob.name))\n      .map((pipelineOrJob) => ({\n        pipelineOrJob,\n        repoAddress,\n      }))\n      .filter(({pipelineOrJob}) =>\n        display === 'jobs' ? pipelineOrJob.isJob : !pipelineOrJob.isJob,\n      );\n  }, [display, repo, repoAddress]);\n\n  if (loading) {\n    return null;\n  }\n\n  if (error || !pipelinesForTable) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unable to load pipelines\"\n          description={`Could not load pipelines for ${repoAddressAsString(repoAddress)}`}\n        />\n      </Box>\n    );\n  }\n\n  if (!pipelinesForTable.length) {\n    return (\n      <Box padding={64}>\n        <NonIdealState\n          icon=\"job\"\n          title={display === 'jobs' ? 'No jobs found' : 'No pipelines found'}\n          description={\n            <div>\n              {display === 'jobs'\n                ? 'This repository does not have any jobs defined.'\n                : 'This repository does not have any pipelines defined.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return <PipelineTable pipelinesOrJobs={pipelinesForTable} showRepo={false} />;\n};\n","import {Box, PageHeader, Tabs, Tag, Heading} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect, Route, Switch, useParams} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {OpsRoot} from '../ops/OpsRoot';\nimport {SchedulesRoot} from '../schedules/SchedulesRoot';\nimport {SensorsRoot} from '../sensors/SensorsRoot';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepositoryAssetsList} from './RepositoryAssetsList';\nimport {RepositoryGraphsList} from './RepositoryGraphsList';\nimport {RepositoryPipelinesList} from './RepositoryPipelinesList';\nimport {useRepository} from './WorkspaceContext';\nimport {repoAddressAsString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nexport const WorkspaceRepoRoot: React.FC<Props> = (props) => {\n  const {repoAddress} = props;\n  const {tab} = useParams<{tab?: string}>();\n\n  const path = repoAddressAsString(repoAddress);\n  const repo = useRepository(repoAddress);\n\n  const anyPipelines = React.useMemo(() => {\n    return repo?.repository.pipelines.some((pipelineOrJob) => !pipelineOrJob.isJob);\n  }, [repo]);\n\n  const tabs = React.useMemo(() => {\n    const tabList = [\n      {\n        text: 'Assets',\n        href: workspacePathFromAddress(repoAddress, '/assets'),\n      },\n      {text: 'Jobs', href: workspacePathFromAddress(repoAddress, '/jobs')},\n      anyPipelines\n        ? {text: 'Pipelines', href: workspacePathFromAddress(repoAddress, '/pipelines')}\n        : null,\n      {text: 'Graphs', href: workspacePathFromAddress(repoAddress, '/graphs')},\n      {\n        text: 'Ops',\n        href: workspacePathFromAddress(repoAddress, '/ops'),\n      },\n      {text: 'Schedules', href: workspacePathFromAddress(repoAddress, '/schedules')},\n      {text: 'Sensors', href: workspacePathFromAddress(repoAddress, '/sensors')},\n    ];\n\n    return tabList.filter(Boolean) as {text: string; href: string}[];\n  }, [anyPipelines, repoAddress]);\n\n  const activeTab = () => {\n    switch (tab) {\n      case 'schedules':\n        return 'Schedules';\n      case 'sensors':\n        return 'Sensors';\n      case 'solids':\n        return 'Solids';\n      case 'ops':\n        return 'Ops';\n      case 'graphs':\n        return 'Graphs';\n      case 'jobs':\n        return 'Jobs';\n      case 'pipelines':\n        return 'Pipelines';\n      case 'assets':\n        return 'Assets';\n      default:\n        return 'Jobs';\n    }\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%'}}>\n      <PageHeader\n        title={<Heading>{path}</Heading>}\n        tags={<Tag icon=\"folder\">Repository</Tag>}\n        tabs={\n          <Tabs size=\"small\" selectedTabId={activeTab()}>\n            {tabs.map(({href, text}) => (\n              <TabLink key={text} id={text} title={text} to={href} />\n            ))}\n          </Tabs>\n        }\n      />\n      <Container>\n        <Switch>\n          <Route path=\"/workspace/:repoPath/schedules\">\n            <SchedulesRoot repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/sensors\">\n            <SensorsRoot repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/assets(/?.*)\">\n            <RepositoryAssetsList repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/ops/:name?\">\n            <OpsRoot repoAddress={repoAddress} />\n          </Route>\n          <Route\n            path=\"/workspace/:repoPath/solids/:name?\"\n            render={(props) => <Redirect to={props.match.url.replace(/\\/solids\\/?/, '/ops/')} />}\n          />\n          <Route path=\"/workspace/:repoPath/pipelines\">\n            <RepositoryPipelinesList display=\"pipelines\" repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/jobs\">\n            <RepositoryPipelinesList display=\"jobs\" repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/graphs\" exact>\n            <RepositoryGraphsList repoAddress={repoAddress} />\n          </Route>\n          <Route path=\"/workspace/:repoPath/(.*)?\" render={() => <Redirect to={tabs[0].href} />} />\n        </Switch>\n      </Container>\n    </Box>\n  );\n};\n\nconst Container = styled.div`\n  flex: 1;\n  flex-grow: 1;\n  min-height: 0;\n`;\n","import {Box, MainContent, NonIdealState} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Route, Switch, useParams} from 'react-router-dom';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {AssetGroupRoot} from '../assets/AssetGroupRoot';\nimport {PipelineRoot} from '../pipelines/PipelineRoot';\nimport {ScheduleRoot} from '../schedules/ScheduleRoot';\nimport {SensorRoot} from '../sensors/SensorRoot';\n\nimport {GraphRoot} from './GraphRoot';\nimport {WorkspaceContext} from './WorkspaceContext';\nimport {WorkspaceJobsRoot} from './WorkspaceJobsRoot';\nimport {WorkspaceOverviewRoot} from './WorkspaceOverviewRoot';\nimport {WorkspacePipelineRoot} from './WorkspacePipelineRoot';\nimport {WorkspaceRepoRoot} from './WorkspaceRepoRoot';\nimport {repoAddressFromPath} from './repoAddressFromPath';\n\nconst RepoRouteContainer = () => {\n  const {repoPath} = useParams<{repoPath: string}>();\n  const workspaceState = React.useContext(WorkspaceContext);\n  const addressForPath = repoAddressFromPath(repoPath);\n\n  // A RepoAddress could not be created for this path, which means it's invalid.\n  if (!addressForPath) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Invalid repository\"\n          description={\n            <div>\n              <div>\n                <strong>{repoPath}</strong>\n              </div>\n              {'  is not a valid repository path.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  const {loading} = workspaceState;\n\n  if (loading) {\n    return <div />;\n  }\n\n  const matchingRepo = workspaceState.allRepos.find(\n    (repo) =>\n      repo.repository.name === addressForPath.name &&\n      repo.repositoryLocation.name === addressForPath.location,\n  );\n\n  // If we don't have any active repositories, or if our active repo does not match\n  // the repo path in the URL, it means we aren't able to load this repo.\n  if (!matchingRepo) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"Unknown repository\"\n          description={\n            <div>\n              <div>\n                <strong>{repoPath}</strong>\n              </div>\n              {'  is not loaded in the current workspace.'}\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/workspace/:repoPath/graphs/(/?.*)\">\n        <GraphRoot repoAddress={addressForPath} />\n      </Route>\n      <Route\n        path={[\n          '/workspace/:repoPath/pipelines/(/?.*)',\n          '/workspace/:repoPath/jobs/(/?.*)',\n          '/workspace/:repoPath/pipeline_or_job/(/?.*)',\n        ]}\n      >\n        <PipelineRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/workspace/:repoPath/schedules/:scheduleName/:runTab?\">\n        <ScheduleRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path=\"/workspace/:repoPath/sensors/:sensorName\">\n        <SensorRoot repoAddress={addressForPath} />\n      </Route>\n      <Route path={['/workspace/:repoPath/asset-groups/:groupName/list(/?.*)']}>\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"list\" />\n      </Route>\n      <Route\n        path={[\n          '/workspace/:repoPath/asset-groups/:groupName/(/?.*)',\n          '/workspace/:repoPath/asset-groups/:groupName',\n        ]}\n      >\n        <AssetGroupRoot repoAddress={addressForPath} tab=\"lineage\" />\n      </Route>\n      <Route path=\"/workspace/:repoPath/:tab?\">\n        <WorkspaceRepoRoot repoAddress={addressForPath} />\n      </Route>\n    </Switch>\n  );\n};\n\nexport const WorkspaceRoot = () => {\n  const {flagNewWorkspace} = useFeatureFlags();\n  return (\n    <MainContent>\n      <Switch>\n        <Route path=\"/workspace\" exact>\n          <WorkspaceOverviewRoot />\n        </Route>\n        {flagNewWorkspace ? (\n          <Route path=\"/workspace/jobs\" exact>\n            <WorkspaceJobsRoot />\n          </Route>\n        ) : null}\n        <Route path={['/workspace/pipelines/:pipelinePath', '/workspace/jobs/:pipelinePath']}>\n          <WorkspacePipelineRoot />\n        </Route>\n        <Route path=\"/workspace/:repoPath\">\n          <RepoRouteContainer />\n        </Route>\n      </Switch>\n    </MainContent>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default WorkspaceRoot;\n"],"names":["RepositoryRemoteLocationLink","repositoryUrl","formattedUrl","url","org","repo","tag","urlObj","URL","host","pathname","split","error","formatRepositoryUrl","href","target","rel","Icon","color","Colors","name","style","display","verticalAlign","TIME_FORMAT","showSeconds","showTimezone","LocationStatus","props","location","locationOrError","React","showDialog","setShowDialog","reloadFn","buildReloadFnForLocation","useRepositoryLocationReload","scope","reloading","tryReload","loadStatus","locationOrLoadError","Tag","minimal","intent","__typename","Box","flex","alignItems","gap","ButtonLink","onClick","fontSize","isOpen","onDismiss","onTryReload","ReloadButton","canReloadRepositoryLocation","usePermissions","enabled","ReloadRepositoryLocationButton","direction","Spinner","purpose","Tooltip","content","disabledReason","RepositoryLocationsList","WorkspaceContext","locationEntries","loading","length","padding","horizontal","Table","colSpan","map","maxWidth","Group","spacing","displayMetadata","metadata","idx","key","value","wordBreak","whiteSpace","Timestamp","timestamp","unix","updatedTimestamp","timeFormat","width","vertical","NonIdealState","icon","title","description","AssetGroupRoot","repoAddress","tab","useTrackPageView","useParams","groupName","path","history","useHistory","useDocumentTitle","groupPath","workspacePathFromAddress","groupSelector","repositoryLocationName","repositoryName","onChangeExplorerPath","mode","explorerPathToString","onNavigateToForeignNode","node","replace","assetKey","encodeURIComponent","join","push","assetDetailsPathForKey","view","Page","flexDirection","paddingBottom","PageHeader","right","marginBottom","ReloadAllButton","label","tags","RepositoryLink","tabs","justifyContent","margin","Tabs","selectedTabId","TabLink","id","to","AssetGraphExplorer","fetchOptions","options","preferAssetRendering","explodeComposites","explorerPath","explorerPathFromString","AssetsCatalogTable","prefixPath","decodeURIComponent","filter","Boolean","setPrefixPath","LaunchpadSetupFromRunRoot","canLaunchPipelineExecution","repoPath","pipelinePath","runId","LaunchpadSetupFromRunAllowedRoot","pipelineName","useRepository","isJob","isThisThingAJob","useJobTitle","useExecutionSessionStorage","storageData","onSave","useQuery","CONFIG_FOR_RUN_QUERY","variables","data","runOrError","run","runConfigYaml","solidSelection","newSession","slice","Array","applyCreateSession","LaunchpadSessionLoading","LaunchpadSessionError","message","gql","PYTHON_ERROR_FRAGMENT","LaunchpadSetupRoot","LaunchpadSetupAllowedRoot","queryString","qs","window","search","ignoreQueryPrefix","config","solidSelectionQuery","LatestRunTag","lastRunQuery","LATEST_RUN_TAG_QUERY","runsFilter","DagsterTag","repoAddressAsString","notifyOnNetworkStatusChange","useQueryRefreshAtInterval","FIFTEEN_SECONDS","runsOrError","pipelineRunsOrError","results","stats","start","startTime","end","endTime","status","RunStatus","size","placement","TimestampDisplay","timingStringForStatus","RUN_TIME_FRAGMENT","JobMetadata","job","JobScheduleOrSensorTag","runsForAssetScan","RelatedAssetsTag","relatedAssets","getRelatedAssets","matchingSchedules","schedules","matchingSensors","sensors","ScheduleOrSensorTag","assetNodes","tokenForAssetKey","uniq","flatMap","r","assets","a","open","setOpen","Dialog","canOutsideClickClose","canEscapeKeyClose","onClose","minWidth","bottom","Button","RUN_METADATA_FRAGMENT","JOB_METADATA_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","JOB_METADATA_QUERY","pipelineTabs","overview","pathComponent","playground","getPermissionsResult","permissions","runs","partitions","currentOrder","PipelineNav","match","useRouteMatch","active","component","tabList","Object","keys","find","t","tabForPipelinePathComponent","params","selector","snapshotId","hasPartitionSet","repository","partitionSets","some","partitionSet","navMetadata","pipelineOrError","useJobNavMetadata","hasLaunchpad","explorerPathForTab","opNames","text","tabForKey","wrap","permissionsResult","disabled","DEFAULT_RUN_LAUNCHER_NAME","BackfillPartitionSelector","partitionSetName","onLaunch","onCancel","onSubmit","partitionData","partitionNames","k","selected","_setSelected","tagEditorOpen","setTagEditorOpen","setTags","query","setQuery","reexecute","fromFailure","setOptions","repositorySelector","repoAddressToSelector","BACKFILL_SELECTOR_QUERY","pipelineSelector","fetchPolicy","mounted","current","pipelineSnapshotOrError","pipelineSnapshot","instance","solids","explodeCompositesInHandleGraph","solidHandles","h","solid","solidsFiltered","filterByQuery","stepRows","buildLayout","nodes","all","GanttChartMode","boxes","box","x","usingDefaultRunLauncher","runLauncher","isFailed","failedPartitions","missingPartitions","successPartitions","setSelected","selection","selectionSet","Set","has","Section","Checkbox","marginLeft","checked","every","includes","onChange","e","from","concat","small","PartitionRangeInput","top","PartitionStatus","onSelect","GraphQueryInput","items","placeholder","autoApplyChanges","TagEditor","tagsFromSession","onRequestClose","border","borderRadius","onRequestEdit","daemonHealth","daemonStatus","healthy","DaemonNotRunningAlert","runQueuingSupported","UsingDefaultLauncherAlert","LaunchBackfillButton","reexecutionSteps","step","undefined","onSuccess","backfillId","SharedToaster","action","showBackfillSuccessToast","onError","messageForLaunchBackfillError","showBackfillErrorToast","useMutation","LAUNCH_PARTITION_BACKFILL_MUTATION","launchBackfill","backfillParams","launchPartitionBackfill","count","reexecutionCount","buttonTitle","LaunchButton","runCount","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","result","errors","PythonErrorInfo","invalidStepKey","invalidOutputName","stepKey","underline","showCustomAlert","body","Alert","children","side","PartitionGraph","jobDataByPartition","stepDataByPartition","yLabel","hiddenStepKeys","hiddenPartitions","setHiddenPartitions","chart","onGraphClick","event","xAxis","scales","offsetX","offsetY","type","chartArea","left","shiftKey","labelIndex","getValueForPixel","partitionName","labels","defaultOptions","animation","y","plugins","legend","_e","_legendItem","maintainAspectRatio","jobData","stepData","forEach","hidden","stepDataByKey","_fillPartitions","buildDatasetData","allLabel","graphData","datasets","borderColor","backgroundColor","colorHash","PartitionGraphContainer","height","ref","points","pointData","point","styled","FAILED_STATUSES","PartitionView","queryResult","PARTITIONS_STATUS_QUERY","Loading","partitionSetOrError","partitionsOrError","PartitionViewContent","pageSize","setPageSize","offset","setOffset","showSteps","setShowSteps","showBackfillSetup","setShowBackfillSetup","blockDialog","setBlockDialog","canLaunchPartitionBackfill","useViewport","viewport","containerProps","backfillRefetchCounter","setBackfillRefetchCounter","usePartitionStepQuery","_approximatePageSize","Math","ceil","selectedPartitions","max","runDurationData","stepDurationData","p","runsLoaded","lastRun","stepStats","s","statusData","partitionStatusesOrError","runStatus","runDuration","zIndex","_backfillId","_stepQuery","CountBox","selectionWindowSize","maxIdx","selectedIdx","indexOf","nextOffset","min","tooltipMessage","PartitionStepStatus","JobBackfills","refetchCounter","cursorStack","setCursorStack","cursor","setCursor","JOB_BACKFILLS_QUERY","limit","partialRefetch","refetch","backfills","paginationProps","hasPrevCursor","hasNextCursor","popCursor","nextStack","pop","advanceCursor","nextCursor","reset","BackfillTable","showPartitionSet","allPartitions","borderLeft","BACKFILL_TABLE_FRAGMENT","PipelinePartitionsRoot","useStripSnapshotFromPath","PIPELINE_PARTITIONS_ROOT_QUERY","partitionSetsOrError","PipelineOrJobDisambiguationRoot","useLocation","pipelineOrJobName","replacedPath","PipelineOverviewRoot","jobName","opsQuery","PipelineRoot","render","PipelineRunsRoot","COLOR_MAP","InstigationTickStatus","LiveTickTimeline","ticks","nextTick","onHoverTick","onSelectTick","Date","now","setNow","graphNow","setGraphNow","isPaused","setPaused","interval","setInterval","clearInterval","nextTickRadius","sin","PI","tickData","tick","tickColors","tickRadii","fill","borderWidth","pointBorderWidth","pointBorderColor","pointRadius","pointHoverRadius","pointBackgroundColor","pointHoverBorderWidth","pointHoverBorderColor","duration","grid","bounds","time","minUnit","tooltip","displayColors","callbacks","tooltipItem","datasetIndex","dataIndex","cursorLabel","skipReason","runIds","originRunIds","_event","activeElements","item","index","onHover","elements","HTMLElement","element","TickDetailsDialog","instigationSelector","JOB_SELECTED_TICK_QUERY","skip","instigationStateOrError","copyValue","TICK_TAG_FRAGMENT","Chart","zoomPlugin","DEFAULT_SHOWN_STATUS_STATE","STATUS_TEXT_MAP","TicksTable","useQueryPersistedState","encode","states","queryState","state","toLowerCase","String","decode","shownStates","setShownStates","copyToClipboard","useCopyToClipboard","statuses","useCursorPaginatedQuery","nextCursorForResult","PAGE_SIZE","getResultArray","JOB_TICK_HISTORY_QUERY","instigationType","StatusFilter","InstigationType","fontFamily","FontFamily","marginRight","str","TRUNCATION_THRESHOLD","CopyButton","marginTop","TickHistoryTimeline","onHighlightRunIds","Number","selectedTime","setSelectedTime","pollingPaused","pausePolling","ONE_MONTH","onTickClick","RUN_STATUS_FRAGMENT","IconWrapper","ScheduleDetails","schedule","refreshState","cronSchedule","executionTimezone","futureTicks","copyText","setCopyText","token","setTimeout","clearTimeout","scheduleState","latestTick","running","InstigationStatus","ScheduleSwitch","timezone","link","hover","QueryRefresh","MetadataTable","PipelineReference","pipelineHrefContext","SchedulePartitionStatus","humanCronString","ScheduleRoot","scheduleName","scheduleSelector","selectedTab","setSelectedTab","SCHEDULE_ROOT_QUERY","allowStaleData","scheduleOrError","showDaemonWarning","SchedulerInfo","SchedulePreviousRuns","highlightedIds","PREVIOUS_RUNS_FOR_SCHEDULE_QUERY","RunTable","actionBarComponents","SCHEDULE_FRAGMENT","INSTANCE_HEALTH_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","SensorPreviousRuns","sensor","PREVIOUS_RUNS_FOR_SENSOR_QUERY","targets","SensorRoot","sensorName","sensorSelector","SENSOR_ROOT_QUERY","sensorOrError","SensorDetails","SensorInfo","SENSOR_FRAGMENT","GraphRoot","minHeight","GraphExplorerRoot","parentNames","graphResult","GRAPH_EXPLORER_ROOT_QUERY","graphSelector","graphName","rootHandleID","requestScopeHandleID","graphOrError","parentHandle","solidHandle","displayedHandles","GraphExplorer","fullPath","container","handles","isGraph","getInvocations","definitionName","definition","handleID","GRAPH_EXPLORER_FRAGMENT","WorkspaceTabs","WorkspaceJobsRoot","searchValue","setSearchValue","useRepoExpansionState","expandedKeys","onToggle","allRepos","WORKSPACE_JOBS_QUERY","recentRunsData","RECENT_RUNS_PER_JOB_QUERY","runsByJob","useRunsByJob","schedulesAndSensorsByJob","useSchedulesAndSensorsByJob","repoBuckets","useRepoBuckets","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","jobs","grow","RepoFilterButton","TextInput","repoKey","expanded","jobCount","RepoSectionHeader","repoName","repoLocation","showLocation","rightElement","JobTable","workspaceOrError","byJobKey","entry","repositories","buildRepoAddress","jobKey","makeJobKey","dataForJob","pipelines","sort","b","localeCompare","repositoryLocation","isHiddenAssetGroupJob","pipeline","WORKSPACE_JOB_FRAGMENT","REPOSITORY_INFO_FRAGMENT","SCHEDULE_FUTURE_TICKS_FRAGMENT","WorkspaceOverviewRoot","flagNewWorkspace","useFeatureFlags","useRepositoryOptions","anyPipelinesInWorkspace","option","repoString","buildRepoPath","anyPipelines","pipelineOrJob","workspacePath","WorkspacePipelineRoot","entireMatch","toAppend","reposWithMatch","findRepoContainingPipeline","optionToRepoAddress","OpCard","inputDefinitions","outputDefinitions","layout","layoutOp","inputs","d","dependsOn","outputs","dependedBy","OpCardContainer","OpNode","invocation","minified","onDoubleClick","onEnterComposite","onHighlightEdges","focused","highlightedEdges","dim","OP_CARD_SOLID_DEFINITION_FRAGMENT","OP_NODE_DEFINITION_FRAGMENT","UsedSolidDetails","onClickInvocation","USED_SOLID_DETAILS_QUERY","repositoryOrError","usedSolid","SidebarOpDefinition","showingSubgraph","invocations","i","SIDEBAR_OP_DEFINITION_FRAGMENT","OpDetailScrollContainer","flatUniq","arrs","arr","OpsRoot","OPS_ROOT_QUERY","usedSolids","OpsRootWithData","q","typeExplorer","suggestions","values","displayName","tokenizedValuesFromString","filtered","startsWith","filterSolidsWithSearch","onSearch","stringFromValue","onClickOp","defName","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","OpListColumnContainer","TokenizingField","suggestionProviders","nonce","__webpack_nonce__","OpList","second","cache","CellMeasurerCache","defaultHeight","fixedWidth","lastWidth","clearAll","selectedIndex","findIndex","Container","rowCount","rowHeight","scrollToIndex","className","rowRenderer","parent","OpListItem","OpName","OpTypeSignature","overscanRowCount","OP_TYPE_SIGNATURE_FRAGMENT","SchedulesRoot","SCHEDULES_ROOT_QUERY","unloadableInstigationStatesOrError","schedulesSection","SchedulesTable","SchedulesNextTicks","repos","Unloadable","scheduleStates","SensorsRoot","SENSORS_ROOT_QUERY","sensorsOrError","SensorsTable","sensorStates","INSTIGATION_STATE_FRAGMENT","REPOSITORY_ASSETS_LIST_QUERY","RepositoryAssetsList","assetsForTable","displayNameForAssetKey","asset","Description","REPOSITORY_GRAPHS_LIST_QUERY","RepositoryGraphsList","graphsForTable","jobGraphNames","PipelineTable","pipelinesOrJobs","showRepo","truncationThreshold","PIPELINE_TABLE_FRAGMENT","REPOSITORY_PIPELINES_LIST_QUERY","RepositoryPipelinesList","pipelinesForTable","WorkspaceRepoRoot","activeTab","exact","RepoRouteContainer","workspaceState","addressForPath","repoAddressFromPath","WorkspaceRoot","MainContent","M"],"sourceRoot":""}